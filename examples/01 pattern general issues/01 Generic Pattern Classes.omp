; OM File Header - Saved 2017/04/03 20:54:16
; (6.120001 :patc (om-make-point 10 10) (om-make-point 0 0) (om-make-point 1054 549) "" 183 0 "2017/03/21 8:40:54" "2017/04/03 20:50:22")
; End File Header
(in-package :om)(load-lib-for (quote ("Patterns")))(setf *om-current-persistent* (om-load-patch1 "01 Generic Pattern Classes" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 287 30) (quote "generates elements by rewrite rules") "" (om-make-point 620 460) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-REWRITE" (quote p-rewrite) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil))) (om-make-point 517 440) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 287 30) (quote "returns systematic permutations of its elements") "" (om-make-point 620 360) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-ROTATION" (quote p-rotation) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil))) (om-make-point 515 340) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 287 30) (quote "computes elements by function call") "" (om-make-point 620 280) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-THUNK" (quote p-thunk) (quote ((om-load-inputfun (quote input-funbox) "" "FUNCTION" nil))) (om-make-point 520 250) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 287 30) (quote "generates elements from a directed graph") "" (om-make-point 620 180) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-GRAPH" (quote p-graph) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil))) (om-make-point 520 160) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 287 30) (quote "returns nth order Markov chains of its elements") "" (om-make-point 620 80) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-MARKOV" (quote p-markov) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil))) (om-make-point 515 60) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 314 30) (quote "selects elements from a weighted distribution") "" (om-make-point 120 460) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-WEIGHTING" (quote p-weighting) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil))) (om-make-point 20 440) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 314 30) (quote "randomly permutes elements") "" (om-make-point 120 360) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-HEAP" (quote p-heap) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil))) (om-make-point 34 340) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 349 38) (quote "Pattern Description - Generic Pattern Classes") "" (om-make-point 388 10) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 314 30) (quote "generates elements forwards and backwards") "" (om-make-point 120 280) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-PALINDROME" (quote p-palindrome) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil) (om-load-inputfunmenu1 (quote input-funmenu) "" "ELIDE" nil (list (list "t" (quote t)) (list "nil" nil))))) (om-make-point 20 250) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-LINE" (quote p-line) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil))) (om-make-point 40 160) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 314 30) (quote "enumerates sequentially and sticks on last element") "" (om-make-point 120 180) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 258 30) (quote "loops over elements in a continuous cycle") "" (om-make-point 120 80) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-CYCLE" (quote p-cycle) (quote ((om-load-inputfun (quote input-funbox) "data" "OF" nil))) (om-make-point 40 60) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) nil 6.120001))
