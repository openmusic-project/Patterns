; OM File Header - Saved 2017/04/03 20:54:16
; (6.120001 :patc (om-make-point 10 60) (om-make-point 0 0) (om-make-point 825 595) "" 183 0 "2017/03/21 9:43:40" "2017/04/03 20:54:16")
; End File Header
(in-package :om)(load-lib-for (quote ("Patterns")))(setf *om-current-persistent* (om-load-patch1 "03 Generic Pattern Initializations" (quote ((let ((box (om-load-boxcomment "comment 2" (om-make-point 529 30) (quote "All pattern classes accept these arguments {of &key for repeat name returning eop-hook}") "" (om-make-point 140 79) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-CYCLE" (quote p-cycle) (quote ((om-load-inputfun (quote input-funbox) "data" "OF" nil) (om-load-inputkeyword (quote input-keyword) "for" "for" (quote :for) nil nil) (om-load-inputkeyword (quote input-keyword) "repeat" "repeat" (quote :repeat) nil nil) (om-load-inputkeyword (quote input-keyword) "of pattern" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "eop-hook" "returning" (quote :returning) nil nil) (om-load-inputkeyword (quote input-keyword) "" "eop-hook" (quote :eop-hook) nil nil))) (om-make-point 58 498) (om-make-point 535 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 442 45) (quote "{function} An optional function (thunk) to call each time the period is reset.$The function is passed no arguments and any return values are ignored. ") "" (om-make-point 140 371) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 95 38) (quote ":eop-hook") "" (om-make-point 40 370) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 492 60) (quote "{function} An optional function to apply to each element as it is generated from the $pattern. The function is passed one argument, the element, and should return the$value to substitute in its place as the value returned from the pattern. ") "" (om-make-point 140 312) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 95 38) (quote ":returning") "" (om-make-point 40 310) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 120 430) (om-make-point 30 32) (quote of) "of" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 391 430) (om-make-point 72 32) (quote :returning) ":returning" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 518 60) (quote "{string | symbol} Sets the name of the pattern to string or to the print name of symbol. $A named pattern can be recalled as a \"motive\" inside a surrounding pattern by fetching $the object from its name using the #& read macro or the find-object function.") "" (om-make-point 140 255) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 72 38) (quote ":name") "" (om-make-point 40 250) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 529 45) (quote "{number}  Sets an optional repetition limit for the pattern. Once the limit has been reached$the pattern will return an end of data marker instead of elements. ") "" (om-make-point 140 200) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 72 38) (quote ":repeat") "" (om-make-point 40 210) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 471 430) (om-make-point 75 32) (quote :eop-hook) ":eop-hook" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 326 430) (om-make-point 55 32) (quote :name) ":name" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 252 430) (om-make-point 58 32) (quote :repeat) ":repeat" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 190 430) (om-make-point 37 32) (quote :for) ":for" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 543 45) (quote "{number | pattern} Sets the period length of the pattern to number or pattern of numbers. $The period length determines the number of elements in each chunk the pattern generates. ") "" (om-make-point 140 160) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 44 38) (quote ":for") "" (om-make-point 40 170) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 229 38) (quote "Generic Pattern Initializations") "" (om-make-point 180 20) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 449 30) (quote "{data} Specifies the element or list of elements to generate from the pattern") "" (om-make-point 140 120) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 31 38) (quote "of") "" (om-make-point 44 130) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 1 0 nil 0) (15 0 1 1 nil 0) (14 0 1 2 nil 0) (13 0 1 3 nil 0) (7 0 1 4 nil 0) (12 0 1 5 nil 0))) nil 6.120001))
