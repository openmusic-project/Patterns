; OM File Header - Saved 2024/01/02 16:22:26
; (7.04 :patc (om-make-point 226 60) (om-make-point 0 0) (om-make-point 814 432) "" 183 0 nil "2024/01/02 16:22:26")
; End File Header
(in-package :om)(load-lib-for (quote ("Patterns")))(setf *om-current-persistent* (om-load-patch1 "04 Creating and reading" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 323 38) (quote "Creating Patterns and reading their events") "" (om-make-point 280 60) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 164 45) (quote "p-next returns successive$items from a stream") "" (om-make-point 20 220) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 220 84) (quote "optional [num] is how many$items to generate on each evaluation.$$num=t means return one$period's worth of items") "" (om-make-point 420 282) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 380 280) (om-make-point 23 32) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-NEXT" (quote p-next) (quote ((om-load-inputfun (quote input-funbox) "pattern" "OBJ" nil) (om-load-inputfun (quote input-funbox) "pattern" "NUM" nil))) (om-make-point 360 320) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 229 38) (quote "Working with Patterns - ex. 4") "" (om-make-point 280 20) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 298 84) (quote "create a cyclig pattern stream.$$Take care to lock it after the first evaluation below for$the examples in this$patch to work correctly)") "" (om-make-point 272 117) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 270 282) (om-make-point 27 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-NEXT" (quote p-next) (quote ((om-load-inputfun (quote input-funbox) "pattern" "OBJ" nil) (om-load-inputfun (quote input-funbox) "pattern" "NUM" nil))) (om-make-point 240 320) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 114 28) (quote "eval several times") "" (om-make-point 20 340) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-NEXT" (quote p-next) (quote ((om-load-inputfun (quote input-funbox) "pattern" "OBJ" nil))) (om-make-point 140 320) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 174 77) (om-make-point 65 32) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-CYCLE" (quote p-cycle) (quote ((om-load-inputfun (quote input-funbox) "data" "OF" (list 1 2 3 4)))) (om-make-point 184 126) nil (list (let ((patterns::obj (clos::mlf-allocate-instance (quote patterns::cycle)))) (clos::mlf-set-instance-slots patterns::obj (quote ((patterns::name) (patterns::flags . 32793) (patterns::data (1 2 3 4) nil) (length . 4) (patterns::datum . :not-a-datum) (patterns::period . #S(patterns::period :count 0 :length 4 :stream nil :default 4 :omit 0 :reps 2 :hook nil)) (patterns::value . 4) (patterns::state . :end-of-period) (patterns::repeat . 1152921504606846975) (patterns::parser) (patterns::hooks) (patterns::returning) (patterns::counting . :periods) (patterns::traversing . :depth-first)))) patterns::obj)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 4 0 nil 0) (3 0 4 1 nil 0) (12 0 8 0 nil 0) (7 0 8 1 nil 0) (12 0 10 0 nil 0) (11 0 12 0 nil 0))) nil 7.04))
