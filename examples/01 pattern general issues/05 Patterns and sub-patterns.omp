; OM File Header - Saved 2024/01/02 16:22:26
; (7.04 :patc (om-make-point 226 60) (om-make-point 0 0) (om-make-point 767 516) "" 183 0 nil "2024/01/02 16:22:26")
; End File Header
(in-package :om)(load-lib-for (quote ("Patterns")))(setf *om-current-persistent* (om-load-patch1 "05 Patterns and sub-patterns" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 158 75) (quote "elements in data passed$to the pattern streams$may themselves be$pattern streams") "" (om-make-point 252 123) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 462 374) (om-make-point 34 32) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-NEXT" (quote p-next) (quote ((om-load-inputfun (quote input-funbox) "pattern" "OBJ" (quote n)) (om-load-inputfun (quote input-funbox) "pattern" "NUM" 20))) (om-make-point 417 412) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 166 380) (om-make-point 34 32) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-NEXT" (quote p-next) (quote ((om-load-inputfun (quote input-funbox) "pattern" "OBJ" (quote n)) (om-load-inputfun (quote input-funbox) "pattern" "NUM" 20))) (om-make-point 121 418) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 460 122) (om-make-point 34 32) 16 "16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 500 122) (om-make-point 27 32) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-LINE" (quote p-line) (quote ((om-load-inputfun (quote input-funbox) "" "OF" 16) (om-load-inputkeyword (quote input-keyword) "" "for" (quote :for) nil nil))) (om-make-point 466 170) nil (list (let ((patterns::obj (clos::mlf-allocate-instance (quote patterns::line)))) (clos::mlf-set-instance-slots patterns::obj (quote ((patterns::name) (patterns::flags . 25) (patterns::data (16) nil 16) (length . 1) (patterns::datum . :not-a-datum) (patterns::period . #S(patterns::period :count 0 :length 4 :stream nil :default 1 :omit 0 :reps 35 :hook nil)) (patterns::value . 16) (patterns::state . :end-of-period) (patterns::repeat . 1152921504606846975) (patterns::parser) (patterns::hooks) (patterns::returning) (patterns::counting . :periods) (patterns::traversing . :depth-first)))) patterns::obj)) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 402 172) (om-make-point 27 32) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 8) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)))) (om-make-point 421 249) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-WEIGHTING" (quote p-weighting) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil))) (om-make-point 396 300) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 133 122) (om-make-point 65 32) (list 1 3 5 9) "(1 3 5 9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-HEAP" (quote p-heap) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil))) (om-make-point 140 160) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 33 124) (om-make-point 75 32) (list 0 2 4 6 8) "(0 2 4 6 8)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-CYCLE" (quote p-cycle) (quote ((om-load-inputfun (quote input-funbox) "data" "OF" (list 0 2 4 6 8)))) (om-make-point 60 160) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote b)))) (om-make-point 125 239) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-WEIGHTING" (quote p-weighting) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil))) (om-make-point 100 300) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 203 38) (quote "Patterns and sub-patterns") "" (om-make-point 280 60) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 229 38) (quote "Working with Patterns - ex. 5") "" (om-make-point 280 20) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 2 0 nil 0) (1 0 2 1 nil 0) (16 0 4 0 nil 0) (3 0 4 1 nil 0) (5 0 7 0 nil 0) (6 0 7 1 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0) (9 0 10 0 nil 0) (11 0 12 0 nil 0) (13 0 14 0 nil 0) (14 0 15 0 nil 0) (12 0 15 1 nil 0) (15 0 16 0 nil 0))) nil 7.04))
