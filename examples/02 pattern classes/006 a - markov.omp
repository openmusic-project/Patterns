; OM File Header - Saved 2024/01/02 16:22:26
; (7.04 :patc (om-make-point 172 110) (om-make-point 0 0) (om-make-point 1212 704) "" 183 0 nil "2024/01/02 16:22:26")
; End File Header
(in-package :om)(load-lib-for (quote ("Patterns")))(setf *om-current-persistent* (om-load-patch1 "006 a - markov" (quote ((let ((box (om-load-boxcall (quote abstraction) "example 2: second order rhythms" (om-load-patch-abs1 "example 2: second order rhythms" (quote ((let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" (quote n)) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 507 133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 476 87) (om-make-point 113 32) (list 62 63 56 75 48) "(62 63 56  75 48)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 563 416) (om-make-point 42 32) (list 10) "(10)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 307 299) (om-make-point 27 32) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 330 340) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 439 221) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 479 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 468 312) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 150))) (om-make-point 220 468) (om-make-point 443 130) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (5600) (4800) (5600) (4800) (6200) (4800) (7500) (4800) (6200) (5600) (7500) (4800) (6200) (6300) (6300) (4800) (5600) (6300) (7500) (4800) (6300) (4800) (6200) (6200) (5600) (4800) (4800) (5600) (5600) (7500) (6200) (6200) (7500) (5600) (6200) (5600) (6300) (6300) (6200) (6300) (5600) (4800) (7500) (5600) (4800) (6300) (4800) (6300) (6200) (7500) (6200) (6200) (7500) (4800) (6300) (6300) (7500) (7500) (6300))) :lonset (quote (0 200 350 400 550 600 900 1000 1100 1300 1500 1825 1875 2175 2225 2275 2600 2650 2950 3050 3150 3250 3350 3400 3450 3600 3650 3800 3850 4000 4050 4375 4425 4525 4625 4725 5125 5325 5725 6025 6125 6225 6325 6725 7125 7525 7925 8025 8125 8275 8325 8625 8725 8825 8875 8925 9075 9125 9450 9500 10100)) :ldur (quote ((300) (225) (75) (225) (75) (450) (150) (150) (300) (300) (488) (75) (450) (75) (75) (488) (75) (450) (150) (150) (150) (150) (75) (75) (225) (75) (225) (75) (225) (75) (488) (75) (150) (150) (150) (600) (300) (600) (450) (150) (150) (150) (600) (600) (600) (600) (150) (150) (225) (75) (450) (150) (150) (75) (75) (225) (75) (488) (75) (600))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10) (10))) :legato 150)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list nil nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :fluidsynth) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "rhythms2ms" (om-load-patch-abs1 "rhythms2ms" (quote ((let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 43 317) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 126 201) (om-make-point 37 32) (quote car) "car" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIND" (quote find) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil) (om-load-inputkeyword (quote input-keyword) "" "key" (quote :key) nil nil))) (om-make-point 55 240) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 90 66) (om-make-point 70 115) (load-buffer-textfile (quote ("(e 100)" "(s 50)" "(q 200)" "(e. 150)" "(h 400)" "(q. 300)" "(q.. 325)" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 14 408) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (5 0 2 0 nil 0) (3 1 2 1 nil 0) (1 0 2 2 nil 0) (0 0 4 0 nil 0))) 7.04 nil "" (om-make-point 0 0) (om-make-point 235 489)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 243 140) nil (list nil) "l" "rhythms2ms"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 332 252) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 344 94) (om-make-point 34 32) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-NEXT" (quote p-next) (quote ((om-load-inputfun (quote input-funbox) "pattern" "OBJ" nil) (om-load-inputfun (quote input-funbox) "pattern" "NUM" nil))) (om-make-point 336 133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 145 294) (om-make-point 45 32) (list (quote q) (quote q)) "(q q)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-MARKOV" (quote p-markov) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil) (om-load-inputkeyword (quote input-keyword) "" "past" (quote :past) nil nil))) (om-make-point 93 332) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 134 54) (om-make-point 57 32) "value" "\"value\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "value" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 32 96) (om-make-point 131 184) (load-buffer-textfile (quote ("((e s :-> s)" " (q s :-> e.)" " (q. s :-> s)" " (h s :-> e.)" " (e e :-> s e e. q q. q.. h)" " (* e :-> e)" " (* s :-> e e. q q. q.. h)" " (* h :-> e e. q q. q.. h)" " (* q.. :-> s)" " (* q. :-> e s)" " (* q :-> e e. q q. q.. h)" " (* e. :-> s))" "" "" "")) (quote textfile) "supersede" "value") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 4 0 nil 0) (10 0 4 1 nil 0) (10 0 5 0 nil 0) (0 0 6 0 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (7 0 8 1 nil 1) (4 0 8 2 nil 0) (2 0 8 6 nil 0) (9 0 10 0 nil 0) (12 0 10 1 nil 0) (14 0 12 0 nil 0) (11 0 12 1 nil 0) (16 1 14 0 nil 0) (13 0 14 1 nil 0) (15 0 16 3 nil 0))) 7.04 nil "" (om-make-point 0 0) (om-make-point 871 692)) (quote nil) (om-make-point 230 540) nil nil nil "example 2: second order rhythms"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "example 1: name that tune" (om-load-patch-abs1 "example 1: name that tune" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 83 28) (quote "inspired by?") nil (om-make-point 363 281) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 125)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 150))) (om-make-point 248 364) (om-make-point 476 121) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7900) (7700) (7200) (7200) (7400) (7200) (7900) (7700) (7200) (7200) (7400) (7200) (7900) (7700) (7200) (7200) (7400) (7200) (7900) (7700) (7200) (7200) (7400) (7200) (7900) (7700) (7200) (7200) (7400) (7200) (7900) (7700) (7200) (7200) (8400) (8100) (7700) (7600) (7400) (8200) (8200) (8100) (7700) (7900) (7700) (7200) (7200) (7400) (7200) (7700) (7600) (7400) (8200) (8200) (8100) (7700) (7600) (7400) (8200) (8200))) :lonset (quote (0 125 250 375 500 625 750 875 1000 1125 1250 1375 1500 1625 1750 1875 2000 2125 2250 2375 2500 2625 2750 2875 3000 3125 3250 3375 3500 3625 3750 3875 4000 4125 4250 4375 4500 4625 4750 4875 5000 5125 5250 5375 5500 5625 5750 5875 6000 6125 6250 6375 6500 6625 6750 6875 7000 7125 7250 7375 7563)) :ldur (quote ((188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188) (188))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 150)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list nil nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :fluidsynth) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 303 161) (om-make-point 34 32) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "N->MC" (quote n->mc) (quote ((om-load-inputfun (quote input-funbox) "note name or list of note names" "STRS" (list "C3")))) (om-make-point 279 287) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-NEXT" (quote p-next) (quote ((om-load-inputfun (quote input-funbox) "pattern" "OBJ" (quote n)) (om-load-inputfun (quote input-funbox) "pattern" "NUM" 20))) (om-make-point 281 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-MARKOV" (quote p-markov) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil))) (om-make-point 163 297) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 53 53) (om-make-point 180 234) (load-buffer-textfile (quote ("(d4 c4 :-> (f4 .5) (g4 .5))" "(d4 bb4 :-> bb4)" "(c4 d4 :-> c4)" "(c4 c4 :-> (d4 .667) (c5 0.333))" "(c4 f4 :-> e4)" "(c4 g4 :-> f4)" "(c4 c5 :-> a4)" "(f4 c4 :-> c4) " "(f4 e4 :-> (c4 .5) (d4 .5))" "(f4 g4 :-> f4)" "(e4 d4 :-> bb4)" "(e4 c4 :-> c4)" "(g4 f4 :-> c4)" "(c5 a4 :-> f4)" "(a4 f4 :-> (e4 .5) (g4 .5))" "(bb4 a4 :-> f4)" "(bb4 bb4 :-> a4)" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 1 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (6 1 5 0 nil 0))) 7.04 nil "" (om-make-point 0 0) (om-make-point 808 592)) (quote nil) (om-make-point 60 540) nil nil nil "example 1: name that tune"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 420 84) (quote "Rule				Description$(c -> a (b 2) c)		1st order rule, outcome b twice as likely as a or c$(w a -> e r (d 3) g)	2nd order rule, outcome d half as likely as e r or g$(* x a -> foo bif zuz)	3rd order rule, matches anything followed by x and a$(-> a (b .1) c)		        0th order rule is weighted weighting selection.") "" (om-make-point 493 188) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 166 60) (quote "can be used to return$a rule for a markov pattern$(p-transition lhs rhs)") "" (om-make-point 606 83) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-TRANSITION" (quote p-transition) (quote ((om-load-inputfun (quote input-funbox) "left hand side" "LHS" nil) (om-load-inputfun (quote input-funbox) "right hand side" "RHS" nil))) (om-make-point 509 82) (om-make-point 69 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 722 511) (om-make-point 34 32) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 772 316) (om-make-point 26 32) (quote c) "c" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 806 316) (om-make-point 45 32) (list (quote a) (quote b)) "(a b)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-TRANSITION" (quote p-transition) (quote ((om-load-inputfun (quote input-funbox) "left hand side" "LHS" nil) (om-load-inputfun (quote input-funbox) "right hand side" "RHS" nil))) (om-make-point 766 352) (om-make-point 72 60) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-MARKOV 2" (quote p-markov) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil))) (om-make-point 629 479) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-NEXT" (quote p-next) (quote ((om-load-inputfun (quote input-funbox) "pattern" "OBJ" (quote a)) (om-load-inputfun (quote input-funbox) "pattern" "NUM" 12))) (om-make-point 643 554) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote b)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 590 432) (om-make-point 139 44) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-TRANSITION" (quote p-transition) (quote ((om-load-inputfun (quote input-funbox) "left hand side" "LHS" nil) (om-load-inputfun (quote input-funbox) "right hand side" "RHS" nil))) (om-make-point 626 352) (om-make-point 72 60) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-TRANSITION" (quote p-transition) (quote ((om-load-inputfun (quote input-funbox) "left hand side" "LHS" nil) (om-load-inputfun (quote input-funbox) "right hand side" "RHS" nil))) (om-make-point 506 352) (om-make-point 72 60) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 636 316) (om-make-point 35 32) (list (quote b)) "(b)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 686 316) (om-make-point 35 32) (list (quote a)) "(a)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 526 316) (om-make-point 72 32) (list (quote a) (list (quote b) 3) (quote c)) "(a (b 3) c)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 496 316) (om-make-point 27 32) (quote a) "a" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 428 360) (quote "Implements nth order Markov chains. Each element in the pattern is$specified as a transition rule list:$$    ({past}* -> {next | (next weight)}+ )$$where past is zero or more identifiers that define the \"left hand\"$side of the transition rule and next are the rule's outcomes, aka $\"right hand\" side.$$The number of past choices in the left hand side determines the Markov$order of the pattern.$$lhs: Every transition rule must have the same number of identifiers in$the left hand side; those closer to the rule's transition marker ->$are more recent past choices.  The special \"wildcard\" identifier * can$appear anywhere in the left hand side to match any past value at that$position.$$rhs: To alter the probability of an outcome relative to the other$outcomes in the transtion, specify the outcome together with its$weight as a list.  If weight is a pattern then a new probabilty$distribution for the transition rule will be calculated each time the$transition rule is triggered.") "" (om-make-point 20 100) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 92 38) (quote "markov") "" (om-make-point 20 60) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 8 0 nil 0) (7 0 8 1 nil 0) (11 0 9 0 nil 0) (9 0 10 0 nil 0) (5 0 10 1 nil 0) (13 0 11 0 nil 0) (12 0 11 1 nil 0) (8 0 11 2 nil 0) (14 0 12 0 nil 0) (15 0 12 1 nil 0) (17 0 13 0 nil 0) (16 0 13 1 nil 0))) nil 7.04))
