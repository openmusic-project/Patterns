
(:patch
 (:om-version 0.02)
 (:name "006 a - markov")
 (:doc "")
 (:info
  (:created "2019/09/09 10:52:53")
  (:modified "2019/09/09 10:56:15"))
 (:window (:size (1009 647)) (:position (377 368)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:box
   (:reference
    (:patch
     (:om-version 0.02)
     (:name "example 2: second order rhythms")
     (:doc "")
     (:info (:created nil) (:modified nil))
     (:window (:size (783 650)) (:position (188 138)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:reference om*)
       (:type :function)
       (:group-id nil)
       (:name "om*")
       (:x 514)
       (:y 133)
       (:w 60)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "ARG1")
         (:value n)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "ARG2")
         (:value 100)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 0))
      (:box
       (:reference cons)
       (:type :value)
       (:group-id nil)
       (:name "list")
       (:x 476)
       (:y 94)
       (:w 113)
       (:h 32)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value (:list 62 63 56 75 48))
       (:id 1))
      (:box
       (:reference cons)
       (:type :value)
       (:group-id nil)
       (:name "aux 9")
       (:x 548)
       (:y 416)
       (:w 42)
       (:h 32)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value (:list 10))
       (:id 2))
      (:box
       (:reference fixnum)
       (:type :value)
       (:group-id nil)
       (:name "aux 8")
       (:x 322)
       (:y 299)
       (:w 27)
       (:h 32)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 0)
       (:id 3))
      (:box
       (:reference dx->x)
       (:type :function)
       (:group-id nil)
       (:name "dx->x")
       (:x 318)
       (:y 340)
       (:w 64)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "START")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LIST")
         (:value (:list 1 1))
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 4))
      (:box
       (:reference length)
       (:type :function)
       (:group-id nil)
       (:name "length")
       (:x 439)
       (:y 221)
       (:w 69)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SEQUENCE")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 5))
      (:box
       (:reference nth-random)
       (:type :function)
       (:group-id nil)
       (:name "nth-random")
       (:x 496)
       (:y 186)
       (:w 97)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "LIST")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 6))
      (:box
       (:reference repeat-n)
       (:type :special)
       (:group-id nil)
       (:name "repeat-n")
       (:x 468)
       (:y 312)
       (:w 90)
       (:h 28)
       (:color
        (:color-or-nil
         (:color (:color 0.82 0.85 0.7 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:icon :left)
       (:lock nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "program to repeat")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "n")
         (:value 0)
         (:reactive nil)))
       (:outputs (:output (:name "collected results") (:reactive nil)))
       (:id 7))
      (:box
       (:reference chord-seq)
       (:type :object)
       (:group-id nil)
       (:name "CHORD-SEQ")
       (:x 220)
       (:y 468)
       (:w 443)
       (:h 130)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:name "CHORD-SEQ")
       (:display :mini-view)
       (:showname nil)
       (:show-markers t)
       (:group-id nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LMIDIC")
         (:value (:list 6000))
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LONSET")
         (:value (:list 0 1000))
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LDUR")
         (:value (:list 1000))
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LVEL")
         (:value (:list 100))
         (:reactive nil))
        (:input
         (:type :key)
         (:name "loffset")
         (:value (:list 0))
         (:reactive nil))
        (:input
         (:type :key)
         (:name "lchan")
         (:value (:list 1))
         (:reactive nil))
        (:input
         (:type :key)
         (:name "llegato")
         (:value 150)
         (:reactive nil)))
       (:outputs
        (:output (:name "SELF") (:reactive nil))
        (:output (:name "LMIDIC") (:reactive nil))
        (:output (:name "LONSET") (:reactive nil))
        (:output (:name "LDUR") (:reactive nil))
        (:output (:name "LVEL") (:reactive nil))
        (:output (:name "loffset") (:reactive nil))
        (:output (:name "lchan") (:reactive nil))
        (:output (:name "llegato") (:reactive nil)))
       (:window (:size nil) (:position nil))
       (:edition-params (:staff :g))
       (:value
        (:object
         (:class chord-seq)
         (:slots
          ((:onset 0)
           (:duration 9950)
           (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
           (:symbolic-date nil)
           (:symbolic-dur nil)
           (:symbolic-dur-extent 0)
           (:lmidic
            (:list
             (:list 6200)
             (:list 7500)
             (:list 5600)
             (:list 5600)
             (:list 6300)
             (:list 6200)
             (:list 7500)
             (:list 6200)
             (:list 6200)
             (:list 6200)
             (:list 6300)
             (:list 6300)
             (:list 5600)
             (:list 6300)
             (:list 6200)
             (:list 7500)
             (:list 5600)
             (:list 6300)
             (:list 4800)
             (:list 6300)
             (:list 5600)
             (:list 6200)
             (:list 5600)
             (:list 5600)
             (:list 6300)
             (:list 6300)
             (:list 4800)
             (:list 4800)
             (:list 6200)
             (:list 7500)
             (:list 6200)
             (:list 5600)
             (:list 6200)
             (:list 5600)
             (:list 5600)
             (:list 6200)
             (:list 5600)
             (:list 6200)
             (:list 6300)
             (:list 7500)
             (:list 6200)
             (:list 4800)
             (:list 5600)
             (:list 5600)
             (:list 4800)
             (:list 6300)
             (:list 5600)
             (:list 7500)
             (:list 5600)
             (:list 6300)
             (:list 6200)
             (:list 6200)
             (:list 4800)
             (:list 6300)
             (:list 6300)
             (:list 7500)
             (:list 7500)
             (:list 4800)
             (:list 6200)
             (:list 6300)))
           (:lonset
            (:list
             0
             100
             425
             475
             675
             775
             875
             975
             1375
             1575
             1725
             1775
             2175
             2375
             2575
             2875
             2925
             2975
             3300
             3350
             3500
             3550
             3700
             3750
             3950
             4275
             4325
             4475
             4525
             4725
             4925
             5225
             5325
             5425
             5625
             5825
             6025
             6175
             6225
             6325
             6425
             6725
             6825
             6925
             7075
             7125
             7525
             7825
             7925
             8025
             8325
             8375
             8425
             8625
             8725
             8825
             9125
             9225
             9325
             9725
             9950))
           (:ldur
            (:list
             (:list 150)
             (:list 488)
             (:list 75)
             (:list 300)
             (:list 150)
             (:list 150)
             (:list 150)
             (:list 600)
             (:list 300)
             (:list 225)
             (:list 75)
             (:list 600)
             (:list 300)
             (:list 300)
             (:list 450)
             (:list 75)
             (:list 75)
             (:list 488)
             (:list 75)
             (:list 225)
             (:list 75)
             (:list 225)
             (:list 75)
             (:list 300)
             (:list 488)
             (:list 75)
             (:list 225)
             (:list 75)
             (:list 300)
             (:list 300)
             (:list 450)
             (:list 150)
             (:list 150)
             (:list 300)
             (:list 300)
             (:list 300)
             (:list 225)
             (:list 75)
             (:list 150)
             (:list 150)
             (:list 450)
             (:list 150)
             (:list 150)
             (:list 225)
             (:list 75)
             (:list 600)
             (:list 450)
             (:list 150)
             (:list 150)
             (:list 450)
             (:list 75)
             (:list 75)
             (:list 300)
             (:list 150)
             (:list 150)
             (:list 450)
             (:list 150)
             (:list 150)
             (:list 600)
             (:list 225)))
           (:lvel
            (:list
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)))
           (:loffset
            (:list
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)))
           (:lchan
            (:list
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)))
           (:lport
            (:list
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil))
           (:llegato nil)))
         (:add-slots
          ((:loffset
            (:list
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)))
           (:lchan
            (:list
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)
             (:list 10)))
           (:lport
            (:list
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil))
           (:llegato nil)))))
       (:id 8))
      (:box
       (:reference
        (:patch
         (:om-version 0.02)
         (:name "rhythms2ms")
         (:doc "")
         (:info (:created nil) (:modified nil))
         (:window (:size nil) (:position nil))
         (:grid nil)
         (:lock nil)
         (:boxes)
         (:connections)))
       (:type :patch)
       (:group-id nil)
       (:name "rhythms2ms")
       (:x 250)
       (:y 165)
       (:w 99)
       (:h 48)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:display :mini-view)
       (:group-id nil)
       (:lock nil)
       (:lambda :lambda)
       (:pre-delay 0)
       (:inputs
        (:input
         (:type :standard)
         (:name "input")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "output") (:reactive nil)))
       (:id 9))
      (:box
       (:reference mapcar)
       (:type :function)
       (:group-id nil)
       (:name "mapcar")
       (:x 320)
       (:y 252)
       (:w 75)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "FUNCTION")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LIST")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 10))
      (:box
       (:reference fixnum)
       (:type :value)
       (:group-id nil)
       (:name "aux 3")
       (:x 361)
       (:y 94)
       (:w 34)
       (:h 32)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 60)
       (:id 11))
      (:box
       (:reference p-next)
       (:type :function)
       (:group-id nil)
       (:name "p-next")
       (:x 336)
       (:y 133)
       (:w 69)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "OBJ")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "num")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 12))
      (:box
       (:reference cons)
       (:type :value)
       (:group-id nil)
       (:name "aux 2")
       (:x 118)
       (:y 294)
       (:w 45)
       (:h 32)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value (:list h e.))
       (:id 13))
      (:box
       (:reference p-markov)
       (:type :function)
       (:group-id nil)
       (:name "p-markov")
       (:x 86)
       (:y 332)
       (:w 85)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "OF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :key)
         (:name "past")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 14))
      (:box
       (:reference simple-base-string)
       (:type :value)
       (:group-id nil)
       (:name "aux")
       (:x 121)
       (:y 54)
       (:w 57)
       (:h 32)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value "value")
       (:id 15))
      (:box
       (:reference textbuffer)
       (:type :object)
       (:group-id nil)
       (:name "TEXTFILE")
       (:x 47)
       (:y 96)
       (:w 131)
       (:h 184)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:name "TEXTFILE")
       (:display :mini-view)
       (:showname nil)
       (:group-id nil)
       (:lock :locked)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "CONTENTS")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :key)
         (:name "output-mode")
         (:value :value)
         (:reactive nil)))
       (:outputs
        (:output (:name "SELF") (:reactive nil))
        (:output (:name "CONTENTS") (:reactive nil))
        (:output (:name "output-mode") (:reactive nil)))
       (:window (:size nil) (:position nil))
       (:edition-params (:output-mode :value))
       (:value
        (:object
         (:class textbuffer)
         (:slots
          ((:contents
            (:list
             "((e s :-> s)"
             " (q s :-> e.)"
             " (q. s :-> s)"
             " (h s :-> e.)"
             " (e e :-> s e e. q q. q.. h)"
             " (* e :-> e)"
             " (* s :-> e e. q q. q.. h)"
             " (* h :-> e e. q q. q.. h)"
             " (* q.. :-> s)"
             " (* q. :-> e s)"
             " (* q :-> e e. q q. q.. h)"
             " (* e. :-> s))"
             ""
             ""))))
         (:add-slots ((:input-mode :lines-cols)))))
       (:id 16)))
     (:connections
      (:connection
       (:from (:box 0 :out 0))
       (:to (:box 6 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 1 :out 0))
       (:to (:box 0 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 2 :out 0))
       (:to (:box 8 :in 6))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 3 :out 0))
       (:to (:box 4 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 4 :out 0))
       (:to (:box 8 :in 2))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 5 :out 0))
       (:to (:box 7 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 6 :out 0))
       (:to (:box 7 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 7 :out 0))
       (:to (:box 8 :in 1))
       (:attributes
        (:color (:color 0.0 0.0 1.0 1.0) :style nil :modif nil)))
      (:connection
       (:from (:box 9 :out 0))
       (:to (:box 10 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 10 :out 0))
       (:to (:box 4 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 10 :out 0))
       (:to (:box 5 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 11 :out 0))
       (:to (:box 12 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 12 :out 0))
       (:to (:box 10 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 13 :out 0))
       (:to (:box 14 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 14 :out 0))
       (:to (:box 12 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 16 :out 1))
       (:to (:box 14 :in 0))
       (:attributes (:color nil :style nil :modif nil))))))
   (:type :patch)
   (:group-id nil)
   (:name "example 2: second order rhythms")
   (:x 246)
   (:y 540)
   (:w 202)
   (:h 48)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:group-id nil)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs)
   (:outputs)
   (:id 0))
  (:box
   (:reference
    (:patch
     (:om-version 0.02)
     (:name "example 1: name that tune")
     (:doc "")
     (:info (:created nil) (:modified nil))
     (:window (:size (812 548)) (:position (167 115)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:reference chord-seq)
       (:type :object)
       (:group-id nil)
       (:name "CHORD-SEQ")
       (:x 248)
       (:y 364)
       (:w 476)
       (:h 121)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:name "CHORD-SEQ")
       (:display :mini-view)
       (:showname nil)
       (:show-markers t)
       (:group-id nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LMIDIC")
         (:value (:list 6000))
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LONSET")
         (:value (:list 0 125))
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LDUR")
         (:value (:list 1000))
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "LVEL")
         (:value (:list 100))
         (:reactive nil))
        (:input
         (:type :key)
         (:name "loffset")
         (:value (:list 0))
         (:reactive nil))
        (:input
         (:type :key)
         (:name "lchan")
         (:value (:list 1))
         (:reactive nil))
        (:input
         (:type :key)
         (:name "llegato")
         (:value 150)
         (:reactive nil)))
       (:outputs
        (:output (:name "SELF") (:reactive nil))
        (:output (:name "LMIDIC") (:reactive nil))
        (:output (:name "LONSET") (:reactive nil))
        (:output (:name "LDUR") (:reactive nil))
        (:output (:name "LVEL") (:reactive nil))
        (:output (:name "loffset") (:reactive nil))
        (:output (:name "lchan") (:reactive nil))
        (:output (:name "llegato") (:reactive nil)))
       (:window (:size nil) (:position nil))
       (:edition-params (:staff :g))
       (:value
        (:object
         (:class chord-seq)
         (:slots
          ((:onset 0)
           (:duration 7563)
           (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
           (:symbolic-date nil)
           (:symbolic-dur nil)
           (:symbolic-dur-extent 0)
           (:lmidic
            (:list
             (:list 7900)
             (:list 7700)
             (:list 7200)
             (:list 7200)
             (:list 7400)
             (:list 7200)
             (:list 7900)
             (:list 7700)
             (:list 7200)
             (:list 7200)
             (:list 8400)
             (:list 8100)
             (:list 7700)
             (:list 7600)
             (:list 7400)
             (:list 8200)
             (:list 8200)
             (:list 8100)
             (:list 7700)
             (:list 7900)
             (:list 7700)
             (:list 7200)
             (:list 7200)
             (:list 7400)
             (:list 7200)
             (:list 7900)
             (:list 7700)
             (:list 7200)
             (:list 7200)
             (:list 7400)
             (:list 7200)
             (:list 7700)
             (:list 7600)
             (:list 7200)
             (:list 7200)
             (:list 8400)
             (:list 8100)
             (:list 7700)
             (:list 7600)
             (:list 7400)
             (:list 8200)
             (:list 8200)
             (:list 8100)
             (:list 7700)
             (:list 7900)
             (:list 7700)
             (:list 7200)
             (:list 7200)
             (:list 7400)
             (:list 7200)
             (:list 7900)
             (:list 7700)
             (:list 7200)
             (:list 7200)
             (:list 8400)
             (:list 8100)
             (:list 7700)
             (:list 7900)
             (:list 7700)
             (:list 7200)))
           (:lonset
            (:list
             0
             125
             250
             375
             500
             625
             750
             875
             1000
             1125
             1250
             1375
             1500
             1625
             1750
             1875
             2000
             2125
             2250
             2375
             2500
             2625
             2750
             2875
             3000
             3125
             3250
             3375
             3500
             3625
             3750
             3875
             4000
             4125
             4250
             4375
             4500
             4625
             4750
             4875
             5000
             5125
             5250
             5375
             5500
             5625
             5750
             5875
             6000
             6125
             6250
             6375
             6500
             6625
             6750
             6875
             7000
             7125
             7250
             7375
             7563))
           (:ldur
            (:list
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)
             (:list 188)))
           (:lvel
            (:list
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)
             (:list 100)))
           (:loffset
            (:list
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)))
           (:lchan
            (:list
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)))
           (:lport
            (:list
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil))
           (:llegato nil)))
         (:add-slots
          ((:loffset
            (:list
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)
             (:list 0)))
           (:lchan
            (:list
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)
             (:list 1)))
           (:lport
            (:list
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil
             nil))
           (:llegato nil)))))
       (:id 0))
      (:box
       (:reference fixnum)
       (:type :value)
       (:group-id nil)
       (:name "aux")
       (:x 306)
       (:y 157)
       (:w 34)
       (:h 32)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 60)
       (:id 1))
      (:box
       (:reference n->mc)
       (:type :function)
       (:group-id nil)
       (:name "n->mc")
       (:x 277)
       (:y 297)
       (:w 69)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "STRS")
         (:value (:list "C3"))
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 2))
      (:box
       (:reference p-next)
       (:type :function)
       (:group-id nil)
       (:name "p-next")
       (:x 281)
       (:y 191)
       (:w 69)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "OBJ")
         (:value n)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "num")
         (:value 20)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 3))
      (:box
       (:reference p-markov)
       (:type :function)
       (:group-id nil)
       (:name "p-markov")
       (:x 148)
       (:y 297)
       (:w 85)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "OF")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 4))
      (:box
       (:reference textbuffer)
       (:type :object)
       (:group-id nil)
       (:name "TEXTFILE")
       (:x 53)
       (:y 53)
       (:w 180)
       (:h 234)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align :center)
       (:name "TEXTFILE")
       (:display :mini-view)
       (:showname nil)
       (:group-id nil)
       (:lock :locked)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "SELF")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "CONTENTS")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :key)
         (:name "output-mode")
         (:value :list)
         (:reactive nil)))
       (:outputs
        (:output (:name "SELF") (:reactive nil))
        (:output (:name "CONTENTS") (:reactive nil))
        (:output (:name "output-mode") (:reactive nil)))
       (:window (:size nil) (:position nil))
       (:edition-params (:output-mode :list))
       (:value
        (:object
         (:class textbuffer)
         (:slots
          ((:contents
            (:list
             "(d4 c4 :-> (f4 .5) (g4 .5))"
             "(d4 bb4 :-> bb4)"
             "(c4 d4 :-> c4)"
             "(c4 c4 :-> (d4 .667) (c5 0.333))"
             "(c4 f4 :-> e4)"
             "(c4 g4 :-> f4)"
             "(c4 c5 :-> a4)"
             "(f4 c4 :-> c4) "
             "(f4 e4 :-> (c4 .5) (d4 .5))"
             "(f4 g4 :-> f4)"
             "(e4 d4 :-> bb4)"
             "(e4 c4 :-> c4)"
             "(g4 f4 :-> c4)"
             "(c5 a4 :-> f4)"
             "(a4 f4 :-> (e4 .5) (g4 .5))"
             "(bb4 a4 :-> f4)"
             "(bb4 bb4 :-> a4)"
             ""
             ""))))
         (:add-slots ((:input-mode :lines-cols)))))
       (:id 5)))
     (:connections
      (:connection
       (:from (:box 1 :out 0))
       (:to (:box 3 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 2 :out 0))
       (:to (:box 0 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 3 :out 0))
       (:to (:box 2 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 4 :out 0))
       (:to (:box 3 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 5 :out 1))
       (:to (:box 4 :in 0))
       (:attributes (:color nil :style nil :modif nil))))))
   (:type :patch)
   (:group-id nil)
   (:name "example 1: name that tune")
   (:x 60)
   (:y 540)
   (:w 170)
   (:h 48)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:group-id nil)
   (:lock nil)
   (:lambda nil)
   (:pre-delay 0)
   (:inputs)
   (:outputs)
   (:id 1))
  (:comment
   (:x 496)
   (:y 188)
   (:w 446)
   (:h 90)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font
    (:font (:face "Liberation Sans") (:size 12) (:style :plain)))
   (:align nil)
   (:text
    "Rule				Description
(c -> a (b 2) c)		1st order rule, outcome b twice as likely as a or c
(w a -> e r (d 3) g)	2nd order rule, outcome d half as likely as e r or g
(* x a -> foo bif zuz)	3rd order rule, matches anything followed by x and a
(-> a (b .1) c)		0th order rule is weighted weighting selection.")
   (:id 2))
  (:comment
   (:x 606)
   (:y 82)
   (:w 166)
   (:h 60)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font
    (:font (:face "Liberation Sans") (:size 12) (:style :plain)))
   (:align nil)
   (:text
    "can be used to return
a rule for a markov pattern
(p-transition lhs rhs)")
   (:id 3))
  (:box
   (:reference p-transition)
   (:type :function)
   (:group-id nil)
   (:name "p-transition")
   (:x 496)
   (:y 82)
   (:w 95)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "LHS")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RHS")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 4))
  (:box
   (:reference fixnum)
   (:type :value)
   (:group-id nil)
   (:name "aux 4")
   (:x 722)
   (:y 511)
   (:w 34)
   (:h 32)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 12)
   (:id 5))
  (:box
   (:reference symbol)
   (:type :value)
   (:group-id nil)
   (:name "aux")
   (:x 779)
   (:y 316)
   (:w 26)
   (:h 32)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value c)
   (:id 6))
  (:box
   (:reference cons)
   (:type :value)
   (:group-id nil)
   (:name "aux 2")
   (:x 813)
   (:y 316)
   (:w 45)
   (:h 32)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list a b))
   (:id 7))
  (:box
   (:reference p-transition)
   (:type :function)
   (:group-id nil)
   (:name "p-transition")
   (:x 766)
   (:y 352)
   (:w 95)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "LHS")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RHS")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 8))
  (:box
   (:reference p-markov)
   (:type :function)
   (:group-id nil)
   (:name "p-markov")
   (:x 612)
   (:y 479)
   (:w 85)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "OF")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 9))
  (:box
   (:reference p-next)
   (:type :function)
   (:group-id nil)
   (:name "p-next")
   (:x 637)
   (:y 554)
   (:w 69)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input (:type :standard) (:name "OBJ") (:value a) (:reactive nil))
    (:input
     (:type :optional)
     (:name "num")
     (:value 12)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 10))
  (:box
   (:reference list)
   (:type :function)
   (:group-id nil)
   (:name "list")
   (:x 590)
   (:y 432)
   (:w 139)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input (:type :optional) (:name "x") (:value a) (:reactive nil))
    (:input (:type :optional) (:name "x") (:value b) (:reactive nil))
    (:input
     (:type :optional)
     (:name "x")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 11))
  (:box
   (:reference p-transition)
   (:type :function)
   (:group-id nil)
   (:name "p-transition")
   (:x 628)
   (:y 352)
   (:w 95)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "LHS")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RHS")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 12))
  (:box
   (:reference p-transition)
   (:type :function)
   (:group-id nil)
   (:name "p-transition")
   (:x 493)
   (:y 384)
   (:w 95)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "LHS")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RHS")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 13))
  (:box
   (:reference cons)
   (:type :value)
   (:group-id nil)
   (:name "aux")
   (:x 636)
   (:y 316)
   (:w 35)
   (:h 32)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list b))
   (:id 14))
  (:box
   (:reference cons)
   (:type :value)
   (:group-id nil)
   (:name "aux 2")
   (:x 679)
   (:y 316)
   (:w 35)
   (:h 32)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list a))
   (:id 15))
  (:box
   (:reference cons)
   (:type :value)
   (:group-id nil)
   (:name "aux 2")
   (:x 526)
   (:y 350)
   (:w 72)
   (:h 32)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list a (:list b 3) c))
   (:id 16))
  (:box
   (:reference symbol)
   (:type :value)
   (:group-id nil)
   (:name "aux")
   (:x 505)
   (:y 316)
   (:w 27)
   (:h 32)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value a)
   (:id 17))
  (:comment
   (:x 20)
   (:y 82)
   (:w 428)
   (:h 360)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font
    (:font (:face "Liberation Sans") (:size 12) (:style :plain)))
   (:align nil)
   (:text
    "Implements nth order Markov chains. Each element in the pattern is
specified as a transition rule list:

    ({past}* -> {next | (next weight)}+ )

where past is zero or more identifiers that define the \"left hand\"
side of the transition rule and next are the rule's outcomes, aka 
\"right hand\" side.

The number of past choices in the left hand side determines the Markov
order of the pattern.

lhs: Every transition rule must have the same number of identifiers in
the left hand side; those closer to the rule's transition marker ->
are more recent past choices.  The special \"wildcard\" identifier * can
appear anywhere in the left hand side to match any past value at that
position.

rhs: To alter the probability of an outcome relative to the other
outcomes in the transtion, specify the outcome together with its
weight as a list.  If weight is a pattern then a new probabilty
distribution for the transition rule will be calculated each time the
transition rule is triggered.")
   (:id 18))
  (:comment
   (:x 20)
   (:y 42)
   (:w 92)
   (:h 38)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font
    (:font (:face "Liberation Sans") (:size 16) (:style :bold)))
   (:align nil)
   (:text "markov")
   (:id 19)))
 (:connections
  (:connection
   (:from (:box 5 :out 0))
   (:to (:box 10 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 6 :out 0))
   (:to (:box 8 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 7 :out 0))
   (:to (:box 8 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 8 :out 0))
   (:to (:box 11 :in 2))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 9 :out 0))
   (:to (:box 10 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 11 :out 0))
   (:to (:box 9 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 12 :out 0))
   (:to (:box 11 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 13 :out 0))
   (:to (:box 11 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 14 :out 0))
   (:to (:box 12 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 15 :out 0))
   (:to (:box 12 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 16 :out 0))
   (:to (:box 13 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 17 :out 0))
   (:to (:box 13 :in 0))
   (:attributes (:color nil :style nil :modif nil)))))