
(:patch
 (:om-version 0.02)
 (:name "006 b - markovanalyze")
 (:doc "")
 (:info
  (:created "2019/09/09 10:52:54")
  (:modified "2019/09/10 9:50:28"))
 (:window (:size (1408 669)) (:position (419 389)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:box
   (:library "Patterns")
   (:reference p-markov-analyze)
   (:type :function)
   (:group-id nil)
   (:name "p-markov-analyze")
   (:x 177)
   (:y 221)
   (:w 125)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SEQ")
     (:value nil)
     (:reactive nil))
    (:input (:type :key) (:name "order") (:value nil) (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 0))
  (:comment
   (:x 911)
   (:y 7)
   (:w 378)
   (:h 615)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font
    (:font (:face "Liberation Sans") (:size 12) (:style :plain)))
   (:align nil)
   (:text
    "markov-analyze supports the following keyword arguments:

:order number

    The order of the Markov analysis, defaults to 1. 

:print {true | :table | :pattern | false}

    If the value is true (the default) then two results are
    printed, a transition table and a pattern description. The
    transition table that is printer details the distribution of
    inputs and outputs in the data. The pattern description that
    is printed will instantiate that table if it is
    evalutated. If :print is just :table or :pattern then only
    that form of the analysis is printed. If :print is false then
    no analysis is printed.

:pattern {false | true}

    If false (the default) then markov-analyze does not return
    values. If :pattern? is true then a markov pattern based on
    the analysis transition table is returned.

:key function

    A Lisp function to apply to each item in sequence. function
    should take one argument and return the actual datum to be
    analyzed.

:sort {list | function}

    Specifies the order of labels in the columns and rows of the
    table. If a list of labels is specified its ordering
    determines the column order of the table. If :sort is a
    function it is passed to sort to sort the table labels.

:decimals number

    Specifies the number of decimals to use when printing the
    table. Defaults to 3.")
   (:id 1))
  (:comment
   (:x 420)
   (:y 60)
   (:w 429)
   (:h 75)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font
    (:font (:face "Liberation Sans") (:size 12) (:style :plain)))
   (:align nil)
   (:text
    "(markov-analyze list [:order i] [:print? b] [:pattern? b] [:key l])

Performs an analysis of elements in list and prints or returns the results
as a p-markov pattern")
   (:id 2))
  (:comment
   (:x 420)
   (:y 20)
   (:w 155)
   (:h 38)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font
    (:font (:face "Liberation Sans") (:size 16) (:style :bold)))
   (:align nil)
   (:text "p-markov-analyze")
   (:id 3))
  (:comment
   (:x 290)
   (:y 155)
   (:w 115)
   (:h 45)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font
    (:font (:face "Liberation Sans") (:size 12) (:style :plain)))
   (:align nil)
   (:text
    "1st order markov,
try 2,3..")
   (:id 4))
  (:comment
   (:x 57)
   (:y 221)
   (:w 94)
   (:h 45)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font
    (:font (:face "Liberation Sans") (:size 12) (:style :plain)))
   (:align nil)
   (:text
    "analyze data,
return pattern")
   (:id 5))
  (:comment
   (:x 60)
   (:y 90)
   (:w 94)
   (:h 30)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font
    (:font (:face "Liberation Sans") (:size 12) (:style :plain)))
   (:align nil)
   (:text "input material")
   (:id 6))
  (:box
   (:reference fixnum)
   (:type :value)
   (:group-id nil)
   (:name "aux 9")
   (:x 531)
   (:y 331)
   (:w 41)
   (:h 32)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 100)
   (:id 7))
  (:box
   (:reference om*)
   (:type :function)
   (:group-id nil)
   (:name "om*")
   (:x 471)
   (:y 371)
   (:w 60)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "ARG1")
     (:value n)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "ARG2")
     (:value 100)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 8))
  (:box
   (:reference fixnum)
   (:type :value)
   (:group-id nil)
   (:name "aux 7")
   (:x 214)
   (:y 20)
   (:w 34)
   (:h 32)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 84)
   (:id 9))
  (:box
   (:reference fixnum)
   (:type :value)
   (:group-id nil)
   (:name "aux 6")
   (:x 170)
   (:y 20)
   (:w 34)
   (:h 32)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 48)
   (:id 10))
  (:box
   (:reference om-random)
   (:type :function)
   (:group-id nil)
   (:name "om-random")
   (:x 161)
   (:y 60)
   (:w 96)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input (:type :standard) (:name "LOW") (:value 0) (:reactive nil))
    (:input
     (:type :standard)
     (:name "HIGH")
     (:value 1)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 11))
  (:box
   (:reference chord-seq)
   (:type :object)
   (:group-id nil)
   (:name "CHORD-SEQ 2")
   (:x 343)
   (:y 432)
   (:w 386)
   (:h 105)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:name "CHORD-SEQ 2")
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:group-id nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LMIDIC")
     (:value (:list 6000))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LONSET")
     (:value (:list 0 100))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LDUR")
     (:value (:list 1000))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LVEL")
     (:value (:list 100))
     (:reactive nil))
    (:input
     (:type :key)
     (:name "loffset")
     (:value (:list 0))
     (:reactive nil))
    (:input
     (:type :key)
     (:name "lchan")
     (:value (:list 1))
     (:reactive nil))
    (:input
     (:type :key)
     (:name "llegato")
     (:value 300)
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "LMIDIC") (:reactive nil))
    (:output (:name "LONSET") (:reactive nil))
    (:output (:name "LDUR") (:reactive nil))
    (:output (:name "LVEL") (:reactive nil))
    (:output (:name "loffset") (:reactive nil))
    (:output (:name "lchan") (:reactive nil))
    (:output (:name "llegato") (:reactive nil)))
   (:window (:size (nil nil)) (:position (nil nil)))
   (:edition-params (:staff :g))
   (:value
    (:object
     (:class chord-seq)
     (:slots
      ((:onset 0)
       (:duration 10200)
       (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
       (:symbolic-date nil)
       (:symbolic-dur nil)
       (:symbolic-dur-extent 0)
       (:lmidic
        (:list
         (:list 7500)
         (:list 8300)
         (:list 5300)
         (:list 6400)
         (:list 5200)
         (:list 5100)
         (:list 7500)
         (:list 8300)
         (:list 5300)
         (:list 7800)
         (:list 6100)
         (:list 5500)
         (:list 8000)
         (:list 5900)
         (:list 6000)
         (:list 7400)
         (:list 5400)
         (:list 7500)
         (:list 8300)
         (:list 5300)
         (:list 7800)
         (:list 6100)
         (:list 5500)
         (:list 8000)
         (:list 5900)
         (:list 6300)
         (:list 5900)
         (:list 6300)
         (:list 5900)
         (:list 6000)
         (:list 7400)
         (:list 5400)
         (:list 7500)
         (:list 8300)
         (:list 5300)
         (:list 6400)
         (:list 5200)
         (:list 5100)
         (:list 7000)
         (:list 5300)
         (:list 7800)
         (:list 6100)
         (:list 5500)
         (:list 8000)
         (:list 5900)
         (:list 6300)
         (:list 5900)
         (:list 6300)
         (:list 5900)
         (:list 6000)
         (:list 7400)
         (:list 5400)
         (:list 7500)
         (:list 8300)
         (:list 5300)
         (:list 7800)
         (:list 6100)
         (:list 5500)
         (:list 8000)
         (:list 5900)
         (:list 6300)
         (:list 5900)
         (:list 6000)
         (:list 7400)
         (:list 5400)
         (:list 7500)
         (:list 6200)
         (:list 7300)
         (:list 6200)
         (:list 5700)
         (:list 5100)
         (:list 7000)
         (:list 5300)
         (:list 7800)
         (:list 6100)
         (:list 5500)
         (:list 8000)
         (:list 5900)
         (:list 6000)
         (:list 7400)
         (:list 5400)
         (:list 7500)
         (:list 8300)
         (:list 5300)
         (:list 7800)
         (:list 6100)
         (:list 5500)
         (:list 8000)
         (:list 5900)
         (:list 6000)
         (:list 7400)
         (:list 5400)
         (:list 7500)
         (:list 6200)
         (:list 5700)
         (:list 5100)
         (:list 7500)
         (:list 8300)
         (:list 5300)
         (:list 6400)))
       (:lonset
        (:list
         0
         100
         200
         300
         400
         500
         600
         700
         800
         900
         1000
         1100
         1200
         1300
         1400
         1500
         1600
         1700
         1800
         1900
         2000
         2100
         2200
         2300
         2400
         2500
         2600
         2700
         2800
         2900
         3000
         3100
         3200
         3300
         3400
         3500
         3600
         3700
         3800
         3900
         4000
         4100
         4200
         4300
         4400
         4500
         4600
         4700
         4800
         4900
         5000
         5100
         5200
         5300
         5400
         5500
         5600
         5700
         5800
         5900
         6000
         6100
         6200
         6300
         6400
         6500
         6600
         6700
         6800
         6900
         7000
         7100
         7200
         7300
         7400
         7500
         7600
         7700
         7800
         7900
         8000
         8100
         8200
         8300
         8400
         8500
         8600
         8700
         8800
         8900
         9000
         9100
         9200
         9300
         9400
         9500
         9600
         9700
         9800
         9900
         10200))
       (:ldur
        (:list
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)
         (:list 300)))
       (:lvel
        (:list
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)
         (:list 100)))
       (:loffset
        (:list
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)))
       (:lchan
        (:list
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)))
       (:lport
        (:list
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil))
       (:llegato nil)))
     (:add-slots
      ((:loffset
        (:list
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)
         (:list 0)))
       (:lchan
        (:list
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)
         (:list 1)))
       (:lport
        (:list
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil
         nil))
       (:llegato nil)))))
   (:id 12))
  (:box
   (:reference fixnum)
   (:type :value)
   (:group-id nil)
   (:name "aux 8")
   (:x 290)
   (:y 256)
   (:w 41)
   (:h 32)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 100)
   (:id 13))
  (:box
   (:library "Patterns")
   (:reference p-next)
   (:type :function)
   (:group-id nil)
   (:name "p-next")
   (:x 218)
   (:y 296)
   (:w 69)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "OBJ")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "num")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 14))
  (:box
   (:reference bpf)
   (:type :object)
   (:group-id nil)
   (:name "BPF")
   (:x 397)
   (:y 221)
   (:w 198)
   (:h 93)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:name "BPF")
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:group-id nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "X-POINTS")
     (:value (:list 0 100))
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "Y-POINTS")
     (:value (:list 0 100))
     (:reactive nil))
    (:input
     (:type :key)
     (:name "decimals")
     (:value 0)
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "X-POINTS") (:reactive nil))
    (:output (:name "Y-POINTS") (:reactive nil))
    (:output (:name "decimals") (:reactive nil)))
   (:window (:size (nil nil)) (:position (nil nil)))
   (:edition-params)
   (:value
    (:object
     (:class bpf)
     (:slots
      ((:onset 0)
       (:duration 9900)
       (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
       (:action nil)
       (:color (:color 0.0 0.0 0.0 1.0))
       (:decimals 0)
       (:x-points
        (:list
         0
         100
         200
         300
         400
         500
         600
         700
         800
         900
         1000
         1100
         1200
         1300
         1400
         1500
         1600
         1700
         1800
         1900
         2000
         2100
         2200
         2300
         2400
         2500
         2600
         2700
         2800
         2900
         3000
         3100
         3200
         3300
         3400
         3500
         3600
         3700
         3800
         3900
         4000
         4100
         4200
         4300
         4400
         4500
         4600
         4700
         4800
         4900
         5000
         5100
         5200
         5300
         5400
         5500
         5600
         5700
         5800
         5900
         6000
         6100
         6200
         6300
         6400
         6500
         6600
         6700
         6800
         6900
         7000
         7100
         7200
         7300
         7400
         7500
         7600
         7700
         7800
         7900
         8000
         8100
         8200
         8300
         8400
         8500
         8600
         8700
         8800
         8900
         9000
         9100
         9200
         9300
         9400
         9500
         9600
         9700
         9800
         9900))
       (:y-points
        (:list
         75
         83
         53
         64
         52
         51
         75
         83
         53
         78
         61
         55
         80
         59
         60
         74
         54
         75
         83
         53
         78
         61
         55
         80
         59
         63
         59
         63
         59
         60
         74
         54
         75
         83
         53
         64
         52
         51
         70
         53
         78
         61
         55
         80
         59
         63
         59
         63
         59
         60
         74
         54
         75
         83
         53
         78
         61
         55
         80
         59
         63
         59
         60
         74
         54
         75
         62
         73
         62
         57
         51
         70
         53
         78
         61
         55
         80
         59
         60
         74
         54
         75
         83
         53
         78
         61
         55
         80
         59
         60
         74
         54
         75
         62
         57
         51
         75
         83
         53
         64))))
     (:add-slots
      ((:decimals 0)
       (:color (:color 0.0 0.0 0.0 1.0))
       (:name "BPF")
       (:action nil)
       (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))))))
   (:id 15))
  (:box
   (:reference fixnum)
   (:type :value)
   (:group-id nil)
   (:name "aux 4")
   (:x 228)
   (:y 90)
   (:w 34)
   (:h 32)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 24)
   (:id 16))
  (:box
   (:reference repeat-n)
   (:type :special)
   (:group-id nil)
   (:name "repeat-n")
   (:x 187)
   (:y 131)
   (:w 90)
   (:h 28)
   (:color
    (:color-or-nil (:color (:color 0.82 0.85 0.7 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:icon :left)
   (:lock nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "program to repeat")
     (:value nil)
     (:reactive nil))
    (:input (:type :standard) (:name "n") (:value 0) (:reactive nil)))
   (:outputs (:output (:name "collected results") (:reactive nil)))
   (:id 17))
  (:box
   (:reference fixnum)
   (:type :value)
   (:group-id nil)
   (:name "aux 3")
   (:x 247)
   (:y 168)
   (:w 27)
   (:h 32)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value 1)
   (:id 18)))
 (:connections
  (:connection
   (:from (:box 0 :out 0))
   (:to (:box 14 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 7 :out 0))
   (:to (:box 8 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 8 :out 0))
   (:to (:box 12 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 9 :out 0))
   (:to (:box 11 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 10 :out 0))
   (:to (:box 11 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 11 :out 0))
   (:to (:box 17 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 13 :out 0))
   (:to (:box 14 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 14 :out 0))
   (:to (:box 15 :in 2))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 15 :out 2))
   (:to (:box 8 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 16 :out 0))
   (:to (:box 17 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 17 :out 0))
   (:to (:box 0 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 18 :out 0))
   (:to (:box 0 :in 1))
   (:attributes (:color nil :style nil :modif nil)))))