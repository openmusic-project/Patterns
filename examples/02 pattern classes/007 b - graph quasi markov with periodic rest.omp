; OM File Header - Saved 2024/01/02 21:50:56
; (7.04 :patc (om-make-point 118 10) (om-make-point 1289 32) (om-make-point 1109 742) "" 183 0 nil "2024/01/02 21:50:56")
; End File Header
(in-package :om)(load-lib-for (quote ("Patterns")))(setf *om-current-persistent* (om-load-patch1 "007 b - graph quasi markov with periodic rest" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 331 38) (quote "A quasi-Markov chant with periodic breath. ") "" (om-make-point 266 238) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 164 60) (quote "loop collecting notes and $rhythms, handling$pauses along the way") "" (om-make-point 301 349) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 482 442) (om-make-point 34 32) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 94 486) (om-make-point 462 105) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6200) (6300) (6200) (6000) (6200) (6000) (6900) (7000) (7200) (6700) (6000) (6700) (7200) (7000) (6900) (6200) (6300) (6200) (6300) (6200) (6000) (6200) (6300) (6200) (6000) (6200) (6300) (6300) (7000) (7200) (6900) (6700) (6300) (6200) (6000) (6200) (6000) (6200) (6000) (6200) (6000) (7000) (7200) (6900) (6700) (6300) (6700) (6900) (7200) (7000) (6000) (6700) (7000) (6900) (7200) (6200) (6000) (7000) (6700) (6900) (7200) (6300) (6200) (6000) (6200) (6300) (6300) (6300) (6200) (6300) (6200) (6300) (6200))) :lonset (quote (0 150 300 450 600 750 900 1050 1200 1350 1500 1800 1950 2100 2250 2400 2550 2700 2850 3000 3150 3300 3450 3600 3750 3900 4200 4350 4500 4650 4800 4950 5100 5250 5400 5700 5850 6000 6150 6300 6450 6750 6900 7050 7200 7350 7500 7650 7800 7950 8100 8250 8400 8550 8700 8850 9000 9150 9300 9450 9600 9750 9900 10050 10200 10500 10650 10800 10950 11100 11250 11400 11550 11850 11880)) :ldur (quote ((15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (30) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (30) (15) (15) (15) (15) (15) (15) (15) (15) (30) (15) (15) (15) (15) (15) (30) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (15) (30) (15) (15) (15) (15) (15) (15) (15) (30) (30))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 10)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list nil nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 3 (om-make-point 711 439) (om-make-point 0 0) 0 1 (quote :normal) (quote t) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil "b" nil nil #\# nil #\# nil "b" nil) :lines-list (list 0 0 1 2 2 3 3 4 4 5 6 6) :approx-factor 100 :from-file t)))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 231 414) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 215 314) (om-make-point 41 32) 150 "150" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 111 45) (quote "include pause at$regular intervals") "" (om-make-point 228 176) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 281 314) (om-make-point 34 32) 80 "80" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "pattern" nil) (om-load-inputfun (quote input-funbox) "" "rate" nil) (om-load-inputfun (quote input-funbox) "" "n" nil))) (om-make-point 165 346) (om-make-point 110 60) nil "&" (list (let ((box (om-load-boxcomment "comment" (om-make-point 127 60) (quote "if it's a pause,$accumulate rhythm$value temporarily") "" (om-make-point 288 116) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 250 60) (quote "the 'sequence' makes sure rhythms get$accumulated as long as there's a 'pause'$returned in the note pattern") "" (om-make-point 451 338) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "return: two lists:$ - notes$ - rhythms") "" (om-make-point 367 556) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 209 453) (om-make-point 55 32) (quote pause) "pause" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "DELETE 2" (quote delete) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" (quote pause)) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" (quote x)))) (om-make-point 238 504) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 299 453) (om-make-point 55 32) (quote pause) "pause" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "DELETE" (quote delete) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" (quote pause)) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" (quote x)))) (om-make-point 328 504) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 365 434) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 332 212) (om-make-point 97 49) nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect 2" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 351 338) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 434 209) (om-make-point 97 49) nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "sum" (quote sum) (quote ((om-load-inputfun (quote input-funbox) "numbers to sum" "NUMBER" nil))) (om-make-point 438 131) (om-make-point 88 60) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "n" 2 (om-make-point 579 60) "" "n" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 239 200) (om-make-point 55 32) (quote pause) "pause" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 217 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 554 88) (om-make-point 27 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 62 60) (quote "iteration$control$only") "" (om-make-point 623 102) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 0) (om-load-inputfun (quote input-funbox) "high value" "TO" 10))) (om-make-point 558 130) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-NEXT" (quote p-next) (quote ((om-load-inputfun (quote input-funbox) "pattern" "OBJ" nil))) (om-make-point 107 105) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 165 276) (om-make-point 427 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 104 278) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "rate" 1 (om-make-point 470 59) "" "rate" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "pattern" 0 (om-make-point 106 45) "" "pattern" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 269 555) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 91 486) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 4 0 nil 2) (20 1 4 1 nil 0) (5 0 6 0 nil 2) (7 0 6 1 nil 1) (9 1 7 0 nil 1) (18 0 8 0 nil 0) (11 0 8 1 nil 0) (19 0 9 0 nil 0) (11 0 10 0 nil 0) (11 1 10 1 nil 0) (11 2 10 2 nil 0) (21 0 11 0 nil 0) (18 0 14 0 nil 0) (13 0 14 1 nil 0) (15 0 17 0 nil 0) (12 0 17 1 nil 0) (22 0 18 0 nil 0) (14 0 19 0 nil 0) (8 0 19 1 nil 0) (10 1 19 2 nil 0) (18 0 20 0 nil 0) (4 0 23 0 nil 0) (6 0 23 1 nil 1) (20 0 24 0 nil 0) (9 0 24 1 nil 1))) 2 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 278 117) (om-make-point 55 32) (quote pause) "pause" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote b)))) (om-make-point 193 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-CYCLE" (quote p-cycle) (quote ((om-load-inputfun (quote input-funbox) "data" "OF" nil))) (om-make-point 183 240) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "set up graph pattern of notes" (om-load-patch-abs1 "set up graph pattern of notes" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 74 506) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote b)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote c)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote d)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote e)))) (om-make-point 270 356) (om-make-point 489 44) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 809 115) (om-make-point 65 32) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-CYCLE" (quote p-cycle) (quote ((om-load-inputfun (quote input-funbox) "data" "OF" nil))) (om-make-point 817 155) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 659 110) (om-make-point 45 32) (list 3 5) "(3 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 645 231) (om-make-point 27 32) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "NOTE 2" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 582 155) (om-make-point 60 60) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 6300 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.04 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (measure onset approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list nil nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 3 (om-make-point 370 280) (om-make-point 0 0) 0 0 (quote :normal) (quote t) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-GRAPH-NODE 5" (quote p-graph-node) (quote ((om-load-inputfun (quote input-funbox) "element" "ELEMENT" nil) (om-load-inputkeyword (quote input-keyword) "node id {integer | symbol}" "id" (quote :id) nil nil) (om-load-inputkeyword (quote input-keyword) "to {id | pattern}" "to" (quote :to) nil nil))) (om-make-point 617 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-WEIGHTING 5" (quote p-weighting) (quote ((om-load-inputfun (quote input-funbox) "" "OF" (list 2 5)))) (om-make-point 643 156) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 795 231) (om-make-point 27 32) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 442 155) (om-make-point 60 60) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 6300 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.04 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (measure onset approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list nil nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 3 (om-make-point 370 280) (om-make-point 0 0) 0 0 (quote :normal) (quote t) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil #\# nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 5 6) :approx-factor 100 :from-file t)))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 308 154) (om-make-point 60 60) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 6200 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.04 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (measure onset approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list nil nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 0 0) 0 0 (quote :normal) (quote t) nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 158 154) (om-make-point 60 60) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 6000 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.04 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) "x" nil (pairlis (quote (measure onset approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list nil nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 0 0) 0 0 (quote :normal) (quote t) nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 727 50) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700 6900 7000 7200)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (measure onset approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list nil nil 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 3 (om-make-point 405 280) (om-make-point 0 0) 0 0 (quote :normal) (quote t) (if (find-class (quote scale) nil) (make-instance (quote scale) :alteration-list (list nil #\# nil #\# nil nil #\# nil #\# nil "b" nil) :lines-list (list 0 0 1 1 2 3 3 4 4 5 6 6) :approx-factor 100 :from-file t)))) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-HEAP 2" (quote p-heap) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil))) (om-make-point 740 144) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-GRAPH" (quote p-graph) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil) (om-load-inputkeyword (quote input-keyword) "" "for" (quote :for) nil nil))) (om-make-point 116 407) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 505 231) (om-make-point 27 32) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 365 231) (om-make-point 27 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-GRAPH-NODE 4" (quote p-graph-node) (quote ((om-load-inputfun (quote input-funbox) "element" "ELEMENT" nil) (om-load-inputkeyword (quote input-keyword) "node id {integer | symbol}" "id" (quote :id) nil nil) (om-load-inputkeyword (quote input-keyword) "to {id | pattern}" "to" (quote :to) nil nil))) (om-make-point 767 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-GRAPH-NODE 3" (quote p-graph-node) (quote ((om-load-inputfun (quote input-funbox) "element" "ELEMENT" nil) (om-load-inputkeyword (quote input-keyword) "node id {integer | symbol}" "id" (quote :id) nil nil) (om-load-inputkeyword (quote input-keyword) "to {id | pattern}" "to" (quote :to) nil nil))) (om-make-point 477 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-GRAPH-NODE 2" (quote p-graph-node) (quote ((om-load-inputfun (quote input-funbox) "element" "ELEMENT" nil) (om-load-inputkeyword (quote input-keyword) "node id {integer | symbol}" "id" (quote :id) nil nil) (om-load-inputkeyword (quote input-keyword) "to {id | pattern}" "to" (quote :to) nil nil))) (om-make-point 337 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-GRAPH-NODE" (quote p-graph-node) (quote ((om-load-inputfun (quote input-funbox) "element" "ELEMENT" nil) (om-load-inputkeyword (quote input-keyword) "node id {integer | symbol}" "id" (quote :id) nil nil) (om-load-inputkeyword (quote input-keyword) "to {id | pattern}" "to" (quote :to) nil nil))) (om-make-point 187 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 215 231) (om-make-point 27 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 519 110) (om-make-point 45 32) (list 2 4) "(2 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 379 110) (om-make-point 45 32) (list 1 3) "(1 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-WEIGHTING 3" (quote p-weighting) (quote ((om-load-inputfun (quote input-funbox) "" "OF" (list 2 5)))) (om-make-point 503 156) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-WEIGHTING 2" (quote p-weighting) (quote ((om-load-inputfun (quote input-funbox) "" "OF" (list 2 5)))) (om-make-point 363 156) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 229 110) (om-make-point 45 32) (list 2 5) "(2 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-WEIGHTING" (quote p-weighting) (quote ((om-load-inputfun (quote input-funbox) "" "OF" (list 2 5)))) (om-make-point 213 156) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 50 137) (om-make-point 62 32) (list 6 8 12) "(6 8 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-HEAP" (quote p-heap) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil))) (om-make-point 56 182) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((15 0 0 0 nil 0) (21 0 1 0 nil 0) (20 0 1 1 nil 0) (19 0 1 2 nil 0) (7 0 1 3 nil 0) (18 0 1 4 nil 0) (2 0 3 0 nil 0) (6 1 7 0 nil 0) (5 0 7 1 nil 0) (8 0 7 2 nil 0) (4 0 8 0 nil 0) (13 1 14 0 nil 0) (1 0 15 0 nil 0) (30 0 15 1 nil 0) (14 0 18 0 nil 0) (9 0 18 1 nil 0) (3 0 18 2 nil 0) (10 1 19 0 nil 0) (16 0 19 1 nil 0) (25 0 19 2 nil 0) (11 1 20 0 nil 0) (17 0 20 1 nil 0) (26 0 20 2 nil 0) (12 1 21 0 nil 0) (22 0 21 1 nil 0) (28 0 21 2 nil 0) (23 0 25 0 nil 0) (24 0 26 0 nil 0) (27 0 28 0 nil 0) (29 0 30 0 nil 0))) 7.04 nil "" (om-make-point 47 32) (om-make-point 1216 730)) (quote nil) (om-make-point 3083/30 408/5) nil (list nil) nil "set up graph pattern of notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 3 1 nil 0) (4 0 3 2 nil 0) (2 0 3 7 nil 0) (8 1 4 1 nil 0) (11 0 8 0 nil 0) (5 0 8 1 nil 0) (7 0 8 2 nil 0) (12 0 10 0 nil 0) (9 0 10 1 nil 0) (10 0 11 0 nil 0))) nil 7.04))