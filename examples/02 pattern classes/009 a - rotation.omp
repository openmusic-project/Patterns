; OM File Header - Saved 2017/04/03 9:46:07
; (6.120001 :patc (om-make-point 118 10) (om-make-point 0 0) (om-make-point 998 619) "" 183 0 "2017/04/02 18:18:15" "2017/04/02 19:55:47")
; End File Header
(in-package :om)(load-lib-for (quote ("Patterns")))(setf *om-current-persistent* (om-load-patch1 "009 a - rotation" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 721 8) (om-make-point 98 32) (list (list 0 1 2) (list 1 1 2)) "((0 1 2)(1 1 2))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-CYCLE" (quote p-cycle) (quote ((om-load-inputfun (quote input-funbox) "data" "OF" nil))) (om-make-point 708 49) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 610 80) (om-make-point 64 32) (list (quote a) (quote b) (quote c) (quote d)) "(a b c d)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 695 304) (om-make-point 27 32) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 692 192) (om-make-point 23 32) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" (quote a)) (om-load-inputfun (quote input-funbox) "times" "N" 4))) (om-make-point 660 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-NEXT 2" (quote p-next) (quote ((om-load-inputfun (quote input-funbox) "pattern" "OBJ" nil) (om-load-inputfun (quote input-funbox) "pattern" "NUM" nil))) (om-make-point 660 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-ROTATION 2" (quote p-rotation) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil) (om-load-inputfun (quote input-funbox) "" "ROTATIONS" (list 0 1 1)))) (om-make-point 645 126) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 530 80) (om-make-point 55 32) (list 0 1 1) "(0 1 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 535 304) (om-make-point 27 32) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 532 192) (om-make-point 23 32) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" (quote a)) (om-load-inputfun (quote input-funbox) "times" "N" 4))) (om-make-point 500 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-NEXT" (quote p-next) (quote ((om-load-inputfun (quote input-funbox) "pattern" "OBJ" nil) (om-load-inputfun (quote input-funbox) "pattern" "NUM" nil))) (om-make-point 500 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-ROTATION" (quote p-rotation) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil) (om-load-inputfun (quote input-funbox) "" "ROTATIONS" (list 0 1 1)))) (om-make-point 485 126) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 450 80) (om-make-point 54 32) (list (quote a) (quote b) (quote c)) "(a b c)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 389 480) (quote "Permutes elements according to one or more rotational$descriptions. A rotation is a list of (up to) four integers that$controls an iterative \"swapping\" process that is mapped over all$the data to produce the next permutation:$$    (start step width [end])$$Start is the starting index (zero based) in the pattern's data$for swapping to begin, step is the stepping increment between$swaps, width is the distance between the elements to swap, and$end is the position (inclusive) in the data to stop swapping$at. The default rotation list is (0 1 1), causes elements in the$pattern to rotate leftward, as shown in Table 1.$$Table 1. Permutations of A B C using (0 1 1) as the$rotation. Lower case letters indicate an intermediate step in the$rotation and the _ marks the swap at each step.$$    Permutation	Swap #1	Swap #2$    A B C	b_a c	b c_a$    B C A	c_b a	c a_b$    C A B	a_c b	a b_c$    A B C	...$$rotation supports the following slot initializations:$$:rotations { list | pattern }$    The rotation list or pattern that produces rotation lists.$$See generic pattern initializations for documentation on$additional keyword initializations to the pattern.") nil (om-make-point 25 74) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 92 38) (quote "rotation") "" (om-make-point 92 24) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (6 0 5 0 nil 0) (3 0 5 1 nil 0) (7 0 6 0 nil 0) (4 0 6 1 nil 0) (2 0 7 0 nil 0) (1 0 7 1 nil 0) (12 0 11 0 nil 0) (9 0 11 1 nil 0) (13 0 12 0 nil 0) (10 0 12 1 nil 0) (14 0 13 0 nil 0) (8 0 13 1 nil 0))) nil 6.120001))
