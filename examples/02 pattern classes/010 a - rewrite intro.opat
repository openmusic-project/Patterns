
(:patch
 (:om-version 0.02)
 (:name "010 a - rewrite intro")
 (:doc "")
 (:info
  (:created "2019/09/09 10:52:53")
  (:modified "2019/09/09 10:56:20"))
 (:window (:size (1291 743)) (:position (356 345)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:comment
   (:x 30)
   (:y 672)
   (:w 608)
   (:h 45)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font
    (:font (:face "Liberation Sans") (:size 12) (:style :plain)))
   (:align nil)
   (:text
    "See generic pattern initializations for documentation on additional keyword initializations to the pattern.
")
   (:id 0))
  (:comment
   (:x 460)
   (:y 0)
   (:w 197)
   (:h 38)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font
    (:font (:face "Liberation Sans") (:size 16) (:style :bold)))
   (:align nil)
   (:text "Context-sensitive rules")
   (:id 1))
  (:comment
   (:x 10)
   (:y 120)
   (:w 158)
   (:h 38)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font
    (:font (:face "Liberation Sans") (:size 16) (:style :bold)))
   (:align nil)
   (:text "Context-free rules")
   (:id 2))
  (:comment
   (:x 10)
   (:y 160)
   (:w 372)
   (:h 435)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font
    (:font (:face "Liberation Sans") (:size 12) (:style :plain)))
   (:align nil)
   (:text
    "    Context-free rules are rules that depend only on the nodes
    they are associated with in the pattern. The element is
    specified as a node list similar to the graph pattern:

        (element {property value}+)

    where element is the element to return from the pattern
    followed by one or more property value pairs:

    :id datum

        Specifies a unique identifier for the node in the
        pattern. If omitted, the identifier defaults to the
        element itself. It is good practice to provide each node
        with an explicit id.

    :-> {id | ({id}+) | pattern | false}

        Sets the rewrite expression for the node. The value may
        be a single identifier, a list of identifiers, a pattern
        or false. If the value is false the node is terminal,
        i.e.. it produces no successor(s) in the pattern's next
        generation. If the value is a pattern then the pattern is
        read to produce a successor term each time the node is
        rewritten. Otherwise the value should be an id or list of
        ids that identify successor node(s) in the next
        generation.
")
   (:id 3))
  (:comment
   (:x 880)
   (:y 10)
   (:w 386)
   (:h 660)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font
    (:font (:face "Liberation Sans") (:size 12) (:style :plain)))
   (:align nil)
   (:text
    "    Table 1.Three examples of context sensitive rules: Note that
    the right-hand side may be empty and that the left-hand side
    may use the wild card * to matches any single element in the
    current generation.

    Rule		Description

    (1 (1) 2 :-> 3)	1 rewrites to 3 wherever it is preceded
			by itself and followed by 2

    (1 * (2) :-> 1 2)	2 rewrites to 1 2 whenever 1 occurs two
			positions earlier

    (5 (3) 3 4 :->)	3 rewrites to nothing if preceded by 5
			and followed by itself and 4

rewrite supports the following slot initializations:

:of list

    The list of nodes constituting the pattern data. For
    context-free patterns each element in the list must be proper
    node list as decribed above. For context-sensitive patterns a
    node list only has to be provided for those nodes containing
    patterns as elements, otherwise only the node id needs to be
    specified.

:intially list

    A list of ids that consititute the initial generation to
    return from the pattern. The default generation contains only
    first node listed in the pattern's data.

:rules list

    Sets the rewrite rules of a context-sensitive pattern to
    list.

:generations number

    Sets the number of generations to generate. After number of
    generations the pattern simply reuses the final generation's
    elements as if the pattern were a cycle.")
   (:id 4))
  (:comment
   (:x 460)
   (:y 40)
   (:w 381)
   (:h 630)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font
    (:font (:face "Liberation Sans") (:size 12) (:style :plain)))
   (:align nil)
   (:text
    "    Context-sensitive rules are associated with the entire
    pattern rather than with the nodes in the pattern. This means
    that each rule may reference more than one node in its
    left-hand side and there may be more (or fewer) rules than
    there are nodes. The list of rules is interpreted as an
    ordered set: to produce a new generation, nodes in the
    current generation are matched against the rules to find the
    first rule whose left-hand side is true (matches). This rule
    is then \"triggered\" and the id(s) in its right-hand side are
    added to the next generation.

    Node specification in a context sensitive rewrite pattern are
    simlar to the context-free pattern except that:

        - the :-> marker appears in rules, not in node
          descriptions

        - if the node's :id value is the same as the element then
          it can be specified in place of a node list



    Each rule in a context-sensitive pattern is a list of the form:

        ({id}+ :-> {id}*)

    The :-> marker divides each rule into two sides (Table
    1). The left-hand side of the rule defines the \"matching
    target\" and the right-hand side defines the rewrite
    succession. Either or both sides may contain more than one
    id. If the left-hand side of the rule is a single id then the
    rule matches any node with the same id. If the left-hand side
    has more than one id (a context-sensitive rule) then the rule
    matches if the \"strict predecessor\" in the left-hand side
    matches the current node and the ids around the strict
    predecessor match match the nodes around the current
    node. The strict predecessor id is marked in the left-hand
    side by making it a single element list. Every context rule
    must contain exactly one strict predecessor in its left hand
    side.
")
   (:id 5))
  (:comment
   (:x 40)
   (:y 40)
   (:w 374)
   (:h 75)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font
    (:font (:face "Liberation Sans") (:size 12) (:style :plain)))
   (:align nil)
   (:text
    "Generates elements according to user specified rewrite
rules. Rewrite rules are expressed in terms of nodes and node
identifiers. Two different styles of rule specification are
supported:")
   (:id 6))
  (:comment
   (:x 97)
   (:y 0)
   (:w 71)
   (:h 38)
   (:fgcolor (:color 0 0 0 1.0))
   (:bgcolor nil)
   (:border 0)
   (:roundness nil)
   (:text-font
    (:font (:face "Liberation Sans") (:size 16) (:style :bold)))
   (:align nil)
   (:text "rewrite")
   (:id 7)))
 (:connections))