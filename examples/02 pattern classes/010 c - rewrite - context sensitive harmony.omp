; OM File Header - Saved 2017/08/01 15:20:21
; (6.120004 :patc (om-make-point 118 10) (om-make-point 0 0) (om-make-point 1154 730) "" 183 0 nil "2017/08/01 15:20:21")
; End File Header
(in-package :om)(load-lib-for (quote ("Patterns")))(setf *om-current-persistent* (om-load-patch1 "010 c - rewrite - context sensitive harmony" (quote ((let ((box (om-load-boxcall (quote genfun) "P-REWRITE-NODE 2" (quote p-rewrite-node) (quote ((om-load-inputfun (quote input-funbox) "element" "ELEMENT" nil) (om-load-inputkeyword (quote input-keyword) "node id {integer | symbol}" "id" (quote :id) nil nil))) (om-make-point 169 108) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 268 568) (om-make-point 59 32) (list 0 500) "(0 500)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 593 568) (om-make-point 41 32) 160 "160" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 114 30) (quote ":initial generation") "" (om-make-point 353 251) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 80 30) (quote ":rules input") "" (om-make-point 328 302) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 168 60) (quote "set value of pval knum,$to be updated dynamically$while pattern executes") "" (om-make-point 501 347) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 115 30) (quote "generate N notes") "" (om-make-point 335 460) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 300)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 400))) (om-make-point 77 598) (om-make-point 587 111) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8000 8400 8700) (8100 8400 8800) (8100 8500 8800) (8000 8300 8700) (7900 8300 8600) (7800 8100 8500) (7600 7900 8300) (7700 8100 8400) (7700 8100 8400) (7700 8000 8400) (7800 8200 8500) (7700 8100 8400) (7600 7900 8300) (7400 7700 8100) (7500 7900 8200) (7500 7900 8200) (7500 7800 8200) (7600 8000 8300) (7500 7900 8200) (7400 7700 8100) (7200 7500 7900) (7300 7700 8000) (7300 7700 8000) (7300 7600 8000) (7400 7800 8100) (7300 7700 8000) (7300 7600 8000) (7400 7800 8100) (7300 7700 8000) (7200 7500 7900) (7000 7300 7700) (7100 7500 7800) (7100 7500 7800) (7000 7300 7700) (6800 7100 7500) (6900 7300 7600) (6900 7300 7600) (6900 7200 7600) (7000 7400 7700) (6900 7300 7600) (6800 7100 7500) (6600 6900 7300) (6700 7100 7400) (6700 7100 7400) (6600 6900 7300) (6400 6700 7100) (6500 6900 7200) (6500 6900 7200) (6500 6800 7200) (6600 7000 7300) (6500 6900 7200) (6500 6800 7200) (6600 7000 7300) (6500 6900 7200) (6400 6700 7100) (6200 6500 6900) (6300 6700 7000) (6300 6700 7000) (6200 6500 6900) (6000 6300 6700))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 7000 7500 8000 8500 9000 9500 10000 10500 11000 11500 12000 12500 13000 13500 14000 14500 15000 15500 16000 16500 17000 17500 18000 18500 19000 19500 20000 20500 21000 21500 22000 22500 23000 23500 24000 24500 25000 25500 26000 26500 27000 27500 28000 28500 29000 29500 30300)) :ldur (quote ((800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800) (800 800 800))) :lvel (quote ((100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1))) :legato 160)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 1516 529) 0 1000 nil 37/50 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 459 319) (om-make-point 34 32) 80 "80" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 396 320) (om-make-point 51 32) (quote knum) "knum" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SET-PVAL" (quote set-pval) (quote ((om-load-inputfun (quote input-funbox) "" "NAME" nil) (om-load-inputfun (quote input-funbox) "" "VAL" nil))) (om-make-point 434 353) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 210 433) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 286 458) (om-make-point 34 32) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "L-system harmony" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "L-system pattern stream" nil) (om-load-inputfun (quote input-funbox) "" "N" nil))) (om-make-point 178 500) (om-make-point 157 60) nil nil (list (let ((box (om-load-boxcomment "comment" (om-make-point 131 30) (quote "here's the fun part...") "" (om-make-point 187 306) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 122 45) (quote "reset 'term (to nil)$every time through") "" (om-make-point 14 230) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 216 45) (quote "collect a chord based$on current value of 'term and 'knum") "" (om-make-point 382 506) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 108 30) (quote "collect n chords") "" (om-make-point 303 73) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 233 71) (om-make-point 27 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 410 277) (om-make-point 41 32) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" (quote n)) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 380 317) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 332 388) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 419 144) (om-make-point 51 32) (quote knum) "knum" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-PVAL 2" (quote get-pval) (quote ((om-load-inputfun (quote input-funbox) "" "NAME" nil))) (om-make-point 418 184) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 323 144) (om-make-point 45 32) (quote term) "term" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-PVAL" (quote get-pval) (quote ((om-load-inputfun (quote input-funbox) "" "NAME" nil))) (om-make-point 318 184) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 379 275) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "update term and knum" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 116 335) nil nil nil (list (let ((box (om-load-boxcomment "comment 2" (om-make-point 99 60) (quote "if we see a list$set 'term to$its value") "" (om-make-point 270 274) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 167 60) (quote "if the next item is an atom$update knum from its$previous value") "" (om-make-point 530 274) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 140 45) (quote "loop until 'term is set,$i.e. is a list") "" (om-make-point 24 411) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 134 60) (quote "we're only interested$in the side effects$in this inner loop") "" (om-make-point 447 453) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 226 52) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 538 102) (om-make-point 51 32) (quote knum) "knum" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-PVAL 2" (quote get-pval) (quote ((om-load-inputfun (quote input-funbox) "" "NAME" nil))) (om-make-point 537 135) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "+" (quote +) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 541 224) (om-make-point 56 44) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 466 230) (om-make-point 51 32) (quote knum) "knum" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SET-PVAL 2" (quote set-pval) (quote ((om-load-inputfun (quote input-funbox) "" "NAME" nil) (om-load-inputfun (quote input-funbox) "" "VAL" nil))) (om-make-point 473 268) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 352 164) (om-make-point 45 32) (quote term) "term" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SET-PVAL" (quote set-pval) (quote ((om-load-inputfun (quote input-funbox) "" "NAME" nil) (om-load-inputfun (quote input-funbox) "" "VAL" nil))) (om-make-point 355 208) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LISTP" (quote listp) (quote ((om-load-inputfun (quote input-funbox) "OBJECT" "OBJECT" (quote x)))) (om-make-point 227 275) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 234 349) (om-make-point 246 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-NEXT" (quote p-next) (quote ((om-load-inputfun (quote input-funbox) "pattern" "OBJ" nil))) (om-make-point 224 127) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NOT" (quote not) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 65 254) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 60 130) (om-make-point 45 32) (quote term) "term" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-PVAL" (quote get-pval) (quote ((om-load-inputfun (quote input-funbox) "" "NAME" nil))) (om-make-point 55 171) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "while" (quote whileloop) (quote ((om-load-inputfun (quote input-funbox) "condition" "EXPR" nil))) (om-make-point 46 353) nil nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 398 455) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 232 463) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 6 0 nil 0) (6 0 7 0 nil 0) (14 0 7 1 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0) (10 0 11 0 nil 2) (14 0 11 1 nil 0) (14 0 12 0 nil 0) (12 0 13 0 nil 0) (11 0 13 1 nil 0) (9 0 13 2 nil 0) (4 0 14 0 nil 0) (17 0 15 0 nil 0) (16 0 17 0 nil 0) (15 0 18 0 nil 0) (13 0 20 0 nil 0))) 1 "update term and knum" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 86 278) (om-make-point 33 32) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 29 278) (om-make-point 45 32) (quote term) "term" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SET-PVAL" (quote set-pval) (quote ((om-load-inputfun (quote input-funbox) "" "NAME" nil) (om-load-inputfun (quote input-funbox) "" "VAL" nil))) (om-make-point 52 318) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 305 488) (om-make-point 68 60) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 0) (om-load-inputfun (quote input-funbox) "high value" "TO" 10))) (om-make-point 253 108) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "N" 1 (om-make-point 280 40) "" "N" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "L-system pattern stream" 0 (om-make-point 60 40) "" "L-system pattern stream" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 334 586) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 92 588) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((12 0 6 0 nil 0) (5 0 6 1 nil 0) (6 0 7 1 nil 0) (8 0 9 0 nil 0) (10 0 11 0 nil 0) (11 0 12 0 nil 0) (9 0 12 1 nil 0) (20 0 13 0 nil 0) (15 0 16 0 nil 0) (14 0 16 1 nil 0) (7 0 17 0 nil 0) (4 0 18 0 nil 0) (19 0 18 1 nil 0) (17 1 21 0 nil 0) (16 0 22 0 nil 0) (13 0 22 1 nil 0) (17 0 22 2 nil 0))) 1 "l-system harmony" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 110 30) (quote "L-system pattern") "" (om-make-point 69 329) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-TRANSITION 2" (quote p-transition) (quote ((om-load-inputfun (quote input-funbox) "left hand side" "LHS" nil) (om-load-inputfun (quote input-funbox) "right hand side" "RHS" nil))) (om-make-point 562 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-TRANSITION 2" (quote p-transition) (quote ((om-load-inputfun (quote input-funbox) "left hand side" "LHS" nil) (om-load-inputfun (quote input-funbox) "right hand side" "RHS" nil))) (om-make-point 447 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote b)))) (om-make-point 510 231) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 620 110) (om-make-point 64 32) (list (quote f) (quote g) (quote +) (quote f) (quote -)) "(f g + f -)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 590 110) (om-make-point 27 32) (quote g) "g" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 480 110) (om-make-point 88 32) (list (quote f) (quote -) (quote g) (quote -) (quote -) (quote g) (quote +) (quote f)) "(f - g - - g + f)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 450 110) (om-make-point 23 32) (quote f) "f" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 273 254) (om-make-point 84 32) (list (quote f) (quote +) (quote g) (quote f) (quote -) (quote g) (quote -)) "(f + g f - g - )" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-REWRITE" (quote p-rewrite) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil) (om-load-inputkeyword (quote input-keyword) "" "initially" (quote :initially) nil nil) (om-load-inputkeyword (quote input-keyword) "" "rules" (quote :rules) nil nil))) (om-make-point 228 322) (om-make-point 133 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 400 60) (om-make-point 24 32) (quote -) "-" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 360 60) (om-make-point 31 32) -1 "-1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-REWRITE-NODE" (quote p-rewrite-node) (quote ((om-load-inputfun (quote input-funbox) "element" "ELEMENT" nil) (om-load-inputkeyword (quote input-keyword) "node id {integer | symbol}" "id" (quote :id) nil nil))) (om-make-point 345 105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 300 60) (om-make-point 27 32) (quote +) "+" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 260 60) (om-make-point 27 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-REWRITE-NODE" (quote p-rewrite-node) (quote ((om-load-inputfun (quote input-funbox) "element" "ELEMENT" nil) (om-load-inputkeyword (quote input-keyword) "node id {integer | symbol}" "id" (quote :id) nil nil))) (om-make-point 255 105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 220 60) (om-make-point 27 32) (quote g) "g" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 160 60) (om-make-point 55 32) (list 0 3 7) "(0 3 7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 110 58) (om-make-point 23 32) (quote f) "f" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote b)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 153 189) (om-make-point 210 44) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 40 60) (om-make-point 55 32) (list 0 4 7) "(0 4 7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-REWRITE-NODE" (quote p-rewrite-node) (quote ((om-load-inputfun (quote input-funbox) "element" "ELEMENT" nil) (om-load-inputkeyword (quote input-keyword) "node id {integer | symbol}" "id" (quote :id) nil nil))) (om-make-point 66 106) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 295 38) (quote "rewrite - context-sensitive harmony") "" (om-make-point 92 14) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((31 0 0 0 nil 0) (30 0 0 1 nil 0) (13 0 7 1 nil 0) (1 0 7 2 nil 0) (2 0 7 7 nil 0) (9 0 10 0 nil 0) (8 0 10 1 nil 0) (23 0 11 0 nil 0) (10 0 11 1 nil 0) (11 0 13 0 nil 0) (12 0 13 1 nil 0) (19 0 15 0 nil 0) (18 0 15 1 nil 0) (21 0 16 0 nil 0) (20 0 16 1 nil 0) (16 0 17 0 nil 0) (15 0 17 1 nil 0) (33 0 23 0 nil 0) (22 0 23 1 nil 0) (17 0 23 2 nil 0) (25 0 26 0 nil 0) (24 0 26 1 nil 0) (28 0 29 0 nil 0) (27 0 29 1 nil 0) (35 0 33 0 nil 0) (0 0 33 1 nil 0) (29 0 33 2 nil 0) (26 0 33 3 nil 0) (34 0 35 0 nil 0) (32 0 35 1 nil 0))) nil 6.120004))
