; OM File Header - Saved 2017/04/04 11:48:16
; (6.120001 :patc (om-make-point 10 160) (om-make-point 0 0) (om-make-point 934 623) "" 183 0 "2017/04/04 8:02:50" "2017/04/04 11:48:16")
; End File Header
(in-package :om)(load-lib-for (quote ("Patterns")))(setf *om-current-persistent* (om-load-patch1 "1 a - copier" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 110 60) (quote "((a b) (a b) (a b) $ (c a) (c a) (c a)$ (b c) (b c) (b c))") nil (om-make-point 640 460) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 94 60) (quote "((a b a b a b)$ (c a c a c a)$ (b c b c b c))") nil (om-make-point 520 460) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 109 30) (quote "using :repeat-for") nil (om-make-point 700 200) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 700 163) (om-make-point 27 32) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 691 272) (om-make-point 23 32) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-NEXT 2" (quote p-next) (quote ((om-load-inputfun (quote input-funbox) "pattern" "OBJ" (quote n)) (om-load-inputfun (quote input-funbox) "pattern" "NUM" (quote t)))) (om-make-point 668 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 714 351) (om-make-point 27 32) 9 "9" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" (quote x)) (om-load-inputfun (quote input-funbox) "times" "N" 3))) (om-make-point 668 390) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-COPIER 2" (quote p-copier) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil) (om-load-inputkeyword (quote input-keyword) "" "repeat-for" (quote :repeat-for) nil nil))) (om-make-point 657 201) nil (list nil) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 701 53) (om-make-point 27 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-CYCLE 2" (quote p-cycle) (quote ((om-load-inputfun (quote input-funbox) "data" "OF" nil) (om-load-inputkeyword (quote input-keyword) "for" "for" (quote :for) nil nil))) (om-make-point 654 95) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 644 53) (om-make-point 54 32) (list (quote a) (quote b) (quote c)) "(a b c)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 551 272) (om-make-point 23 32) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-NEXT" (quote p-next) (quote ((om-load-inputfun (quote input-funbox) "pattern" "OBJ" (quote n)) (om-load-inputfun (quote input-funbox) "pattern" "NUM" (quote t)))) (om-make-point 528 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 574 351) (om-make-point 27 32) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" (quote x)) (om-load-inputfun (quote input-funbox) "times" "N" 3))) (om-make-point 528 390) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 550 163) (om-make-point 27 32) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-COPIER" (quote p-copier) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil) (om-load-inputkeyword (quote input-keyword) "" "for" (quote :for) nil nil))) (om-make-point 517 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 561 53) (om-make-point 27 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 504 53) (om-make-point 54 32) (list (quote a) (quote b) (quote c)) "(a b c)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-CYCLE" (quote p-cycle) (quote ((om-load-inputfun (quote input-funbox) "data" "OF" nil) (om-load-inputkeyword (quote input-keyword) "for" "for" (quote :for) nil nil))) (om-make-point 514 95) nil (list nil) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 384 315) (quote "A specialized pattern that copies and repeats periods of a$subpattern.$$copier supports the following slot initializations:$$:of pattern$    Sets the pattern to be copied or repeated.$$:for {number | pattern}$    Specifies how may repetitions of the subpattern will$    constitute one period of elements returned by the copier. The$    total number of elements in the copier's period will equal$    this value times the number of elements returned by the$    subpattern. The default value is 1.$$:repeat-for {number | pattern}$    Specifies how many times each period in the subpattern will$    be repeated and forces the period length of the copier to$    remain the same as the subpattern. This initialization causes$    the :for initialization to be ignored.") nil (om-make-point 43 94) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 65 38) (quote "copier") "" (om-make-point 84 16) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 5 0 nil 0) (4 0 5 1 nil 0) (5 0 7 0 nil 0) (6 0 7 1 nil 0) (10 0 8 0 nil 0) (3 0 8 1 nil 0) (11 0 10 0 nil 0) (9 0 10 1 nil 0) (17 0 13 0 nil 0) (12 0 13 1 nil 0) (13 0 15 0 nil 0) (14 0 15 1 nil 0) (20 0 17 0 nil 0) (16 0 17 1 nil 0) (19 0 20 0 nil 0) (18 0 20 1 nil 0))) nil 6.120001))
