; OM File Header - Saved 2024/01/02 16:31:20
; (7.04 :patc (om-make-point 10 160) (om-make-point 0 0) (om-make-point 928 747) "" 183 0 nil "2024/01/02 16:31:20")
; End File Header
(in-package :om)(load-lib-for (quote ("Patterns")))(setf *om-current-persistent* (om-load-patch1 "1 b - copier wander" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 226 514) (om-make-point 59 32) (list 0 250) "(0 250)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 86 556) (om-make-point 506 104) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5500) (5800) (5700) (5000) (4900) (5500) (5800) (5700) (5000) (4900) (5500) (5800) (5700) (5000) (4900) (5800) (6000) (5700) (5400) (5500) (5800) (6000) (5700) (5400) (5500) (5800) (6000) (5700) (5400) (5500) (5800) (6000) (5700) (5400) (5500) (5800) (6000) (5700) (5400) (5500) (4500) (4800) (5800) (4400) (4200) (4500) (4800) (5800) (4400) (4200) (4500) (4800) (5800) (4400) (4200) (5800) (4500) (4200) (4700) (5500) (5200) (5600) (4400) (5800) (5400) (4100) (4200) (5400) (4600) (5200) (4100) (4200) (5400) (4600) (5200) (4100) (4200) (5400) (4600) (5200) (4100) (4200) (5400) (4600) (5200) (4100) (4200) (5400) (4600) (5200) (5400) (4200) (4700) (5300) (4600) (5400) (4200) (4700) (5300) (4600) (5400) (4200) (4700) (5300) (4600) (5400) (4900) (5400) (4400) (4100) (5100) (5000) (4200) (4500) (4400) (5100) (5000) (4200) (4500) (4400) (5100) (5000) (4200) (4500) (4400) (5100) (5000) (4200) (4500) (4400) (5100) (5000) (4200) (4500) (4400) (5900) (5700) (4100) (4300) (4100) (5900) (5700) (4100) (4300) (4100) (5900) (5700) (4100) (4300) (4100) (5900) (5700) (4100) (4300) (4100) (5900) (5700) (4100) (4300) (4100) (4300) (5900) (5300) (5100) (5400) (4700) (5800) (4800) (5600) (4200) (5600) (4200) (5500) (5400) (4600) (5600) (4200) (5500) (5400) (4600) (5600) (4200) (5500) (5400) (4600) (4400) (5100) (4100) (5600) (4100) (4400) (5100) (4100) (5600) (4100) (4400) (5100) (4100) (5600) (4100) (4400) (5100) (4100) (5600) (4100) (4400) (5100) (4100) (5600) (4100) (4500) (4700) (5600) (4400) (4800) (5800) (5300) (4100) (5600) (5000) (4900) (5600) (4800) (5100) (4400) (4900) (5600) (4800) (5100) (4400) (4900) (5600) (4800) (5100) (4400) (4900) (5600) (4800) (5100) (4400) (4900) (5600) (4800) (5100) (4400) (5500) (6000) (4400) (5800) (5000) (5700) (5900) (5300) (4500) (4400) (5700) (5900) (5300) (4500) (4400) (5700) (5900) (5300) (4500) (4400) (5800) (4800) (6000) (4500) (4100) (5800) (4800) (6000) (4500) (4100) (5800) (4800) (6000) (4500) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100) (4100))) :lonset (quote (0 250 500 750 1000 1250 1500 1750 2000 2250 2500 2750 3000 3250 3500 3750 4000 4250 4500 4750 5000 5250 5500 5750 6000 6250 6500 6750 7000 7250 7500 7750 8000 8250 8500 8750 9000 9250 9500 9750 10000 10250 10500 10750 11000 11250 11500 11750 12000 12250 12500 12750 13000 13250 13500 13750 14000 14250 14500 14750 15000 15250 15500 15750 16000 16250 16500 16750 17000 17250 17500 17750 18000 18250 18500 18750 19000 19250 19500 19750 20000 20250 20500 20750 21000 21250 21500 21750 22000 22250 22500 22750 23000 23250 23500 23750 24000 24250 24500 24750 25000 25250 25500 25750 26000 26250 26500 26750 27000 27250 27500 27750 28000 28250 28500 28750 29000 29250 29500 29750 30000 30250 30500 30750 31000 31250 31500 31750 32000 32250 32500 32750 33000 33250 33500 33750 34000 34250 34500 34750 35000 35250 35500 35750 36000 36250 36500 36750 37000 37250 37500 37750 38000 38250 38500 38750 39000 39250 39500 39750 40000 40250 40500 40750 41000 41250 41500 41750 42000 42250 42500 42750 43000 43250 43500 43750 44000 44250 44500 44750 45000 45250 45500 45750 46000 46250 46500 46750 47000 47250 47500 47750 48000 48250 48500 48750 49000 49250 49500 49750 50000 50250 50500 50750 51000 51250 51500 51750 52000 52250 52500 52750 53000 53250 53500 53750 54000 54250 54500 54750 55000 55250 55500 55750 56000 56250 56500 56750 57000 57250 57500 57750 58000 58250 58500 58750 59000 59250 59500 59750 60000 60250 60500 60750 61000 61250 61500 61750 62000 62250 62500 62750 63000 63250 63500 63750 64000 64250 64500 64750 65000 65250 65500 65750 66000 66250 66500 66750 67000 67250 67500 67750 68000 68250 68500 68750 69000 69250 69500 69750 70000 70250 70500 70750 71000 71250 71500 71750 72000 72250 72500 72750 73000 73250 73500 73750 74000 74250 74500 74750 75000 75250 75500 75750 76000 76250 76500 76750 77000 77250 77500 77750 78000 78250 78500 78750 79000 79250 79500 79750 80000 80250 80500 80750 81000 81250 81500 81750 82000 82250 82500 82750 83000 83250 83500 83750 84000 84250 84500 84750 87750)) :ldur (quotelvel (quoteloffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list nil nil 2 24 (quote f) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :fluidsynth) 6/5 nil 1000 0 (om-make-point 931 744) (om-make-point 0 0) 0 1 (quote :interval) (quote t) nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 200 472) (om-make-point 41 32) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" (quote n)) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 190 512) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 302 285) (om-make-point 34 32) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "k" nil) (om-load-inputfun (quote input-funbox) "" "a" nil))) (om-make-point 209 408) (om-make-point 170 60) nil nil (list (let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 372 454) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 217 406) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 110 427) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "while" (quote whileloop) (quote ((om-load-inputfun (quote input-funbox) "condition" "EXPR" nil))) (om-make-point 21 354) nil nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 62 30) (quote "duration") "" (om-make-point 424 399) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 59 30) (quote "velocity") "" (om-make-point 251 277) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 34 30) (quote "mc") "" (om-make-point 132 290) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 342 187) (om-make-point 34 32) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) ">" (quote >) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" (quote a)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 50))) (om-make-point 324 247) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 420 240) (om-make-point 48 32) 3000 "3000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 360 240) (om-make-point 48 32) 5000 "5000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 362 302) (om-make-point 77 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect 3" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 355 380) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect 2" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 199 250) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 92 281) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-EOD?" (quote p-eod?) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 33 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-NEXT" (quote p-next) (quote ((om-load-inputfun (quote input-funbox) "pattern" "OBJ" nil))) (om-make-point 287 136) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-NEXT" (quote p-next) (quote ((om-load-inputfun (quote input-funbox) "pattern" "OBJ" nil))) (om-make-point 95 137) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NOT" (quote not) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 41 277) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "a" 1 (om-make-point 288 62) "" "a" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "k" 0 (om-make-point 62 54) "" "k" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 282 534) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 60 533) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((12 1 0 0 nil 0) (13 1 1 0 nil 0) (14 1 2 0 nil 0) (18 0 3 0 nil 0) (16 0 8 0 nil 0) (7 0 8 1 nil 0) (8 0 11 0 nil 0) (10 0 11 1 nil 0) (9 0 11 2 nil 0) (11 0 12 0 nil 0) (16 0 13 0 nil 0) (17 0 14 0 nil 0) (20 0 15 0 nil 0) (19 0 16 0 nil 0) (20 0 17 0 nil 0) (15 0 18 0 nil 0) (2 0 21 0 nil 0) (1 0 21 1 nil 0) (0 0 21 2 nil 0) (14 0 22 0 nil 0) (13 0 22 1 nil 0) (12 0 22 2 nil 0))) 3 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 91 60) (quote "amps,$controls durs$inside loop") "" (om-make-point 442 265) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 62 45) (quote "local$ostinata") "" (om-make-point 209 332) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 360 216) (om-make-point 110 32) (list 60 40 40 40 40) "(60 40 40 40 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-HEAP" (quote p-heap) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil))) (om-make-point 390 261) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 256 182) (om-make-point 55 32) (list 1 3 5) "(1 3 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-WEIGHTING 2" (quote p-weighting) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil))) (om-make-point 246 221) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-COPIER" (quote p-copier) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil) (om-load-inputkeyword (quote input-keyword) "" "for" (quote :for) nil nil) (om-load-inputkeyword (quote input-keyword) "" "repeat" (quote :repeat) nil nil))) (om-make-point 256 324) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 73 45) (quote "5-note$segments") "" (om-make-point 52 339) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 161 307) (om-make-point 27 32) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-WEIGHTING" (quote p-weighting) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil) (om-load-inputkeyword (quote input-keyword) "" "for" (quote :for) nil nil))) (om-make-point 118 338) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 190 170) (om-make-point 34 32) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 152 171) (om-make-point 34 32) 41 "41" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 117 185) (om-make-point 27 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 67 184) (om-make-point 46 32) (quote :max) ":max" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote :max)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 95 226) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 120 270) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 41) (om-load-inputfun (quote input-funbox) "end " "END" 60) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 154 208) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 419 75) (quote "Play segments of 5 notes chosen randomly between keynums 41 and$60 with no direct repetition within each segment.$$Play segments 1, 3 or 5 times before selecting the next.") "" (om-make-point 44 75) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 190 38) (quote "copier \"the wanderer\"") "" (om-make-point 84 16) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 1 nil 0) (0 0 1 2 nil 0) (5 2 1 3 nil 1) (5 1 1 4 nil 0) (5 0 3 0 nil 0) (2 0 3 1 nil 0) (12 0 5 0 nil 0) (9 0 5 1 nil 0) (8 0 9 0 nil 0) (10 0 11 0 nil 0) (15 0 12 0 nil 0) (11 0 12 1 nil 0) (4 0 12 2 nil 0) (21 0 15 0 nil 0) (14 0 15 1 nil 0) (19 0 20 1 nil 0) (18 0 20 2 nil 0) (20 0 21 0 nil 0) (22 0 21 1 nil 0) (17 0 22 0 nil 0) (16 0 22 1 nil 0))) nil 7.04))
