; OM File Header - Saved 2024/01/02 16:31:20
; (7.04 :patc (om-make-point 10 160) (om-make-point 0 0) (om-make-point 1329 802) "" 183 0 nil "2024/01/02 16:31:20")
; End File Header
(in-package :om)(load-lib-for (quote ("Patterns")))(setf *om-current-persistent* (om-load-patch1 "2 a - range" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 679 519) (om-make-point 55 30) (list 0 120) "(0 120)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 207 45) (quote "generate notes based on pattern,$stop after \":repeat\" periods") "" (om-make-point 706 362) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 676 407) (om-make-point 41 32) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" (quote n)) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 654 442) (om-make-point 29 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 70)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 500 552) (om-make-point 547 124) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9000) (8700) (8400) (8100) (7800) (7500) (7200) (6900) (6600) (6300) (6000) (5700) (5400) (5100) (4800) (6000) (5800) (5600) (5400) (5200) (5000) (4800) (9000) (8500) (8000) (7500) (7000) (6500) (6000) (5500) (5000) (6000) (5700) (5400) (5100) (4800) (9000) (8800) (8600) (8400) (8200) (8000) (7800) (7600) (7400) (7200) (7000) (6800) (6600) (6400) (6200) (6000) (5800) (5600) (5400) (5200) (5000) (4800) (6000) (5500) (5000) (9000) (8700) (8400) (8100) (7800) (7500) (7200) (6900) (6600) (6300) (6000) (5700) (5400) (5100) (4800) (6000) (5800) (5600) (5400) (5200) (5000) (4800) (9000) (8500) (8000) (7500) (7000) (6500) (6000) (5500) (5000))) :lonset (quote (0 120 240 360 480 600 720 840 960 1080 1200 1320 1440 1560 1680 1800 1920 2040 2160 2280 2400 2520 2640 2760 2880 3000 3120 3240 3360 3480 3600 3720 3840 3960 4080 4200 4320 4440 4560 4680 4800 4920 5040 5160 5280 5400 5520 5640 5760 5880 6000 6120 6240 6360 6480 6600 6720 6840 6960 7080 7200 7320 7440 7560 7680 7800 7920 8040 8160 8280 8400 8520 8640 8760 8880 9000 9120 9240 9360 9480 9600 9720 9840 9960 10080 10200 10320 10440 10560 10680 10800 10920 11920)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil nil nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 555 434) 0 1000 nil 1 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "play-pat" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 641 348) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 263 489) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 202 404) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-EOD?" (quote p-eod?) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 42 228) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-NEXT" (quote p-next) (quote ((om-load-inputfun (quote input-funbox) "pattern" "OBJ" nil))) (om-make-point 161 228) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NOT" (quote not) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 50 338) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "while" (quote whileloop) (quote ((om-load-inputfun (quote input-funbox) "condition" "EXPR" nil))) (om-make-point 31 403) nil nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 103 68) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 264 594) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 164 594) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 1 0 0 nil 0) (3 0 1 0 nil 0) (6 0 2 0 nil 0) (6 0 3 0 nil 0) (2 0 4 0 nil 0) (4 0 5 0 nil 0) (0 0 7 0 nil 0) (1 0 8 0 nil 0))) 1 "play-pat" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 56 30) (quote ":repeat") "" (om-make-point 810 230) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 34 30) (quote ":by") "" (om-make-point 750 230) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 61 30) (quote ":downto") "" (om-make-point 690 230) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 45 30) (quote ":from") "" (om-make-point 650 231) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 824 199) (om-make-point 26 30) 9 "9" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 769 101) (om-make-point 52 30) (list 3 2 5) "(3 2 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-CYCLE" (quote p-cycle) (quote ((om-load-inputfun (quote input-funbox) "data" "OF" nil))) (om-make-point 773 139) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-RANGE 2" (quote p-range) (quote ((om-load-inputkeyword (quote input-keyword) "" "from" (quote :from) 0 (list (list "from" 0) (list "initially" 0))) (om-load-inputkeyword (quote input-keyword) "" "downto" (quote :downto) nil (list (list "inclusive" (quote t)) (list "exclusive" nil))) (om-load-inputkeyword (quote input-keyword) "" "by" (quote :by) nil nil) (om-load-inputkeyword (quote input-keyword) "" "repeat" (quote :repeat) nil nil))) (om-make-point 640 255) (om-make-point 235 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 53 31) (quote ":below") "" (om-make-point 473 129) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-RANGE" (quote p-range) (quote ((om-load-inputkeyword (quote input-keyword) "" "below" (quote :below) 1 nil))) (om-make-point 512 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 719 165) (om-make-point 32 30) 48 "48" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 661 101) (om-make-point 55 30) (list 90 60) "(90 60)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-CYCLE" (quote p-cycle) (quote ((om-load-inputfun (quote input-funbox) "data" "OF" nil))) (om-make-point 667 145) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 544 211) (om-make-point 34 32) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-NEXT" (quote p-next) (quote ((om-load-inputfun (quote input-funbox) "pattern" "OBJ" (quote n)) (om-load-inputfun (quote input-funbox) "pattern" "NUM" (quote t)))) (om-make-point 522 251) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 522 103) (om-make-point 34 32) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 389 705) (quote "Generates numbers from an iterative description.$$range supports the following slot initializations:$$:from {number | pattern}$    The starting value to return from the range. The starting$    value is reset each time it exceeds range boundaries or, if$    the range is unbounded, once each period of the pattern. The$    default value is 0.$$:initially {number}$    Sets the starting value for the iteration one time and then$    never resets it. Only appropriate if the range has no upper$    or lower boundary.$$:to {number | pattern}$    An optional inclusive upper bound on the range. If this value$    is exceeded then the range is reset to its starting value.$$:below {number | pattern}$    Like :to except that the upper bound is exclusive.$$:downto {number | pattern}$    An optional inclusive lower bound on the range. If this value$    is exceeded then the range is reset to its starting value.$$:above {number | pattern}$    Like :downto except that the lower bound is exclusive.$$:by {number | pattern}$    The increment to step between numbers in the range. If the$    value is a pattern a new increment will be reselected$    whenever the starting value is reset.$$:stepping {pattern}$    Like :by except that a increment is reselected from pattern$    each time.$$For bounded ranges the default period length is the number of$values generated in the bounded iteration. For unbounded ranges$the default period length is 1. Note that a range may contain$both upper and lower boundaries. Combining these with a$random :stepping pattern implements bounded random walks.$$See generic pattern initializations for documentation on$additional keyword initializations to the pattern.") "" (om-make-point 44 75) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 190 38) (quote "range") "" (om-make-point 44 36) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 3 0 nil 0) (2 0 3 1 nil 0) (3 0 4 1 nil 0) (0 0 4 2 nil 0) (13 0 5 0 nil 0) (11 0 12 0 nil 0) (18 0 13 0 nil 0) (16 0 13 1 nil 0) (12 0 13 2 nil 0) (10 0 13 3 nil 0) (21 0 15 0 nil 0) (17 0 18 0 nil 0) (15 0 20 0 nil 0) (19 0 20 1 nil 0))) nil 7.04))
