; OM File Header - Saved 2017/08/01 15:34:00
; (6.120004 :patc (om-make-point 10 160) (om-make-point 0 0) (om-make-point 922 737) "" 183 0 nil "2017/08/01 15:34:00")
; End File Header
(in-package :om)(load-lib-for (quote ("Patterns")))(setf *om-current-persistent* (om-load-patch1 "2 b - range melody w. random bounds, whole steps biased" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 590 539) (om-make-point 41 32) 150 "150" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 315 538) (om-make-point 59 32) (list 0 120) "(0 120)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 141 578) (om-make-point 535 97) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (5800) (6000) (5900) (6000) (6300) (6200) (6400) (6500) (6700) (6800) (6700) (6500) (6300) (6400) (6300) (6400) (6700) (6800) (6600) (6500) (6400) (6500) (6300) (6200) (6400) (6600) (6800) (6600) (6400) (6300) (6600) (6800) (6900) (6700) (6600) (6700) (6900) (6600) (6800) (6900) (6700) (6900) (6700) (6900) (6800) (7100) (6000) (5900) (5700) (5400) (5600) (5800) (5500) (5600) (5500) (5200) (5500) (5700) (5800) (5900) (5600) (5900) (5600) (5800) (5900) (6000) (5800) (6000) (5800) (5500) (5400) (5600) (5400) (5500) (5600) (5500) (5700) (5900) (6100))) :lonset (quote (0 120 240 360 480 600 720 840 960 1080 1200 1320 1440 1560 1680 1800 1920 2040 2160 2280 2400 2520 2640 2760 2880 3000 3120 3240 3360 3480 3600 3720 3840 3960 4080 4200 4320 4440 4560 4680 4800 4920 5040 5160 5280 5400 5520 5640 5760 5880 6000 6120 6240 6360 6480 6600 6720 6840 6960 7080 7200 7320 7440 7560 7680 7800 7920 8040 8160 8280 8400 8520 8640 8760 8880 9000 9120 9240 9360 9480 9660)) :ldur (quote ((180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180) (180))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 150)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 283 443) (om-make-point 34 32) 80 "80" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "play-pat" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "pattern" nil) (om-load-inputfun (quote input-funbox) "" "n (reps)" nil))) (om-make-point 239 476) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 131 216) (om-make-point 41 32) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" (quote n)) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 109 252) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 105 309) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-NEXT" (quote p-next) (quote ((om-load-inputfun (quote input-funbox) "pattern" "OBJ" nil))) (om-make-point 88 160) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 204 135) (om-make-point 27 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 0) (om-load-inputfun (quote input-funbox) "high value" "TO" 10))) (om-make-point 228 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "n (reps)" 1 (om-make-point 235 97) "" "n (reps)" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "pattern" 0 (om-make-point 77 79) "" "pattern" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 137 391) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 37 391) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 0 nil 0) (7 0 3 0 nil 0) (4 0 5 0 nil 0) (6 0 5 1 nil 0) (2 1 8 0 nil 0) (2 0 9 0 nil 0))) 1 "play-pat" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 69 30) (quote ":stepping") "" (om-make-point 323 328) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 61 30) (quote ":downto") "" (om-make-point 260 300) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 45 30) (quote ":to") "" (om-make-point 220 300) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 45 30) (quote ":from") "" (om-make-point 170 300) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 265 330) (om-make-point 34 32) 48 "48" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 220 330) (om-make-point 34 32) 72 "72" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 175 330) (om-make-point 34 32) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-RANGE" (quote p-range) (quote ((om-load-inputkeyword (quote input-keyword) "" "from" (quote :from) 0 nil) (om-load-inputkeyword (quote input-keyword) "" "to" (quote :to) 1 nil) (om-load-inputkeyword (quote input-keyword) "" "downto" (quote :downto) nil nil) (om-load-inputkeyword (quote input-keyword) "" "stepping" (quote :stepping) nil nil))) (om-make-point 145 373) (om-make-point 226 60) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 440 164) (om-make-point 21 32) -1 "-1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 380 164) (om-make-point 27 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote b)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote c)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote d)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote e)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote f)))) (om-make-point 150 229) (om-make-point 557 44) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 628 81) (om-make-point 31 32) -3 "-3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 665 80) (om-make-point 37 32) 0.75 ".75" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 710 80) (om-make-point 27 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-W-NODE 4" (quote p-w-node) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputkeyword (quote input-keyword) "" "weight" (quote :weight) 1 nil) (om-load-inputkeyword (quote input-keyword) "" "max" (quote :max) nil nil))) (om-make-point 651 124) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 508 81) (om-make-point 27 32) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 545 80) (om-make-point 37 32) 0.75 ".75" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 590 80) (om-make-point 27 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-W-NODE 3" (quote p-w-node) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputkeyword (quote input-keyword) "" "weight" (quote :weight) 1 nil) (om-load-inputkeyword (quote input-keyword) "" "max" (quote :max) nil nil))) (om-make-point 531 124) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 248 81) (om-make-point 27 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 285 80) (om-make-point 37 32) 1.5 "1.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 330 80) (om-make-point 27 32) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-W-NODE 2" (quote p-w-node) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputkeyword (quote input-keyword) "" "weight" (quote :weight) 1 nil) (om-load-inputkeyword (quote input-keyword) "" "max" (quote :max) nil nil))) (om-make-point 271 124) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 128 81) (om-make-point 31 32) -2 "-2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 165 80) (om-make-point 37 32) 1.5 "1.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 210 80) (om-make-point 27 32) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-W-NODE" (quote p-w-node) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputkeyword (quote input-keyword) "" "weight" (quote :weight) 1 nil) (om-load-inputkeyword (quote input-keyword) "" "max" (quote :max) nil nil))) (om-make-point 151 124) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-WEIGHTING" (quote p-weighting) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil))) (om-make-point 390 275) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 688 38) (quote "range - Melody generated by bounded random walk with whole steps most prevalent. ") "" (om-make-point 54 26) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 2 1 nil 0) (1 0 2 2 nil 0) (0 0 2 7 nil 0) (12 0 4 0 nil 0) (3 0 4 1 nil 0) (11 0 12 0 nil 0) (10 0 12 1 nil 0) (9 0 12 2 nil 0) (32 0 12 3 nil 0) (31 0 15 0 nil 0) (27 0 15 1 nil 0) (14 0 15 2 nil 0) (13 0 15 3 nil 0) (23 0 15 4 nil 0) (19 0 15 5 nil 0) (16 0 19 0 nil 0) (17 0 19 1 nil 0) (18 0 19 2 nil 0) (20 0 23 0 nil 0) (21 0 23 1 nil 0) (22 0 23 2 nil 0) (24 0 27 0 nil 0) (25 0 27 1 nil 0) (26 0 27 2 nil 0) (28 0 31 0 nil 0) (29 0 31 1 nil 0) (30 0 31 2 nil 0) (15 0 32 0 nil 0))) nil 6.120004))
