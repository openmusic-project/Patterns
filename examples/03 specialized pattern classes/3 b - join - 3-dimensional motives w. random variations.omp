; OM File Header - Saved 2024/01/02 16:41:59
; (7.04 :patc (om-make-point 10 160) (om-make-point 0 0) (om-make-point 1031 723) "" 183 0 nil "2024/01/02 16:41:59")
; End File Header
(in-package :om)(load-lib-for (quote ("Patterns")))(setf *om-current-persistent* (om-load-patch1 "3 b - join - 3-dimensional motives w. random variations" (quote ((let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 612 491) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 517 558) (om-make-point 354 122) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7000) (8900) (7900) (8100) (8700) (8900) (7800) (8100) (7000) (7800) (8900) (8100) (8200) (8900) (7900) (8100) (8200) (8900) (7900) (8100) (7000) (9500) (7800) (8100) (8200) (7900) (9500) (8100) (8200) (7900) (9500) (8100) (8700) (7800) (8900) (8100) (8700) (8900) (9500) (8100) (8700) (7800) (9500) (8100) (7000) (8900) (7800) (8100) (7000) (9500) (7900) (8100) (8700) (8900) (9500) (8100) (8200) (8900) (7900) (8100) (8200) (9500) (7900) (8100) (8200) (8900) (7800) (8100) (8700) (8900) (7900) (8100) (8200) (9500) (8900) (8100) (8700) (7800) (7900) (8100))) :lonset (quote (0 50 150 250 450 500 600 650 750 800 900 950 1050 1100 1200 1300 1500 1550 1650 1750 1950 2000 2200 2250 2450 2500 2600 2650 2850 2900 3000 3050 3250 3300 3500 3700 3800 3850 3950 4050 4150 4200 4300 4500 4600 4650 4750 4950 5000 5050 5150 5200 5250 5300 5500 5700 5800 5850 5950 6000 6050 6100 6300 6400 6600 6650 6750 6850 6900 6950 7050 7100 7300 7350 7550 7650 7700 7750 7950 8150 9150)) :ldur (quotelvel (quote ((110) (50) (50) (95) (110) (50) (50) (95) (110) (50) (50) (95) (110) (50) (50) (95) (110) (50) (50) (95) (110) (50) (50) (95) (110) (50) (50) (95) (110) (50) (50) (95) (110) (50) (50) (95) (110) (50) (50) (95) (110) (50) (50) (95) (110) (50) (50) (95) (110) (50) (50) (95) (110) (50) (50) (95) (110) (50) (50) (95) (110) (50) (50) (95) (110) (50) (50) (95) (110) (50) (50) (95) (110) (50) (50) (95) (110) (50) (50) (95))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil nil nil (quote t) (quote :normal) 1 0 (om-make-point 0 0) (om-make-point 918 351) 0 1000 nil 1 (quote :fluidsynth) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 668 357) (om-make-point 34 32) 80 "80" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "play-pat" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "pattern" nil) (om-load-inputfun (quote input-funbox) "" "n" nil))) (om-make-point 570 394) (om-make-point 135 60) nil "&" (list (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 234 261) nil nil nil nil 3))) (setf (numouts box) 3) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect 3" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 359 360) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect 2" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 239 379) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "N->MC" (quote n->mc) (quote ((om-load-inputfun (quote input-funbox) "note name or list of note names" "STRS" (list "C3")))) (om-make-point 142 337) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 140 400) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-NEXT" (quote p-next) (quote ((om-load-inputfun (quote input-funbox) "pattern" "OBJ" nil))) (om-make-point 244 164) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 460 89) (om-make-point 27 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 0) (om-load-inputfun (quote input-funbox) "high value" "TO" 10))) (om-make-point 487 131) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "n" 1 (om-make-point 507 59) "" "n" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "pattern" 0 (om-make-point 65 70) "" "pattern" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 398 532) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 69 534) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 0 0 nil 0) (0 2 1 0 nil 0) (0 1 2 0 nil 0) (0 0 3 0 nil 0) (3 0 4 0 nil 0) (9 0 5 0 nil 0) (6 0 7 0 nil 0) (8 0 7 1 nil 0) (4 1 10 0 nil 0) (2 1 10 1 nil 0) (1 1 10 2 nil 0) (4 0 11 0 nil 0) (2 0 11 1 nil 0) (1 0 11 2 nil 0))) 3 "play-pat" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-CYCLE" (quote p-cycle) (quote ((om-load-inputfun (quote input-funbox) "data" "OF" nil))) (om-make-point 390 614) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-JOIN 3" (quote p-join) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil))) (om-make-point 445 461) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 6" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote b)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote c)))) (om-make-point 311 544) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 608 215) (om-make-point 110 32) (list 35 50 65 80 95) "(35 50 65 80 95)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-CYCLE 5" (quote p-cycle) (quote ((om-load-inputfun (quote input-funbox) "data" "OF" nil))) (om-make-point 639 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 518 169) (om-make-point 90 32) (list 100 50 200) "(100 50 200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 570 195) (om-make-point 27 32) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-HEAP 3" (quote p-heap) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil) (om-load-inputkeyword (quote input-keyword) "" "for" (quote :for) nil nil))) (om-make-point 546 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-JOIN 2" (quote p-join) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil))) (om-make-point 320 445) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 398 202) (om-make-point 41 32) 400 "400" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 317 147) (om-make-point 97 32) (list 100 200 100) "(100 200 100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 5" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 352 258) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-HEAP 2" (quote p-heap) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil))) (om-make-point 340 181) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 177 229) (om-make-point 33 32) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 150 198) (om-make-point 42 32) "e4" "\"e4\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote b)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote c)))) (om-make-point 115 260) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 377 360) (om-make-point 34 32) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-CYCLE 6" (quote p-cycle) (quote ((om-load-inputfun (quote input-funbox) "data" "OF" nil))) (om-make-point 322 310) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote b)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 326 402) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 212 350) (om-make-point 41 32) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 146 276) (om-make-point 83 32) (list 50 50 200) "(50 50 200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-CYCLE 4" (quote p-cycle) (quote ((om-load-inputfun (quote input-funbox) "data" "OF" nil))) (om-make-point 164 310) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-CYCLE 3" (quote p-cycle) (quote ((om-load-inputfun (quote input-funbox) "data" "OF" nil))) (om-make-point 485 185) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 430 126) (om-make-point 158 32) (list "ab5" "f5" "a4" "c#4" "c5") "(\"ab5\" \"f5\" \"a4\" \"c#4\" \"c5\")" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-HEAP" (quote p-heap) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil))) (om-make-point 262 291) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 216 106) (om-make-point 124 32) (list "g4" "f#4" "f5" "b5") "(\"g4\" \"f#4\" \"f5\" \"b5\")" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 122 141) (om-make-point 27 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 53 106) (om-make-point 121 32) (list "eb5" "bb4" "bb3") "(\"eb5\" \"bb4\" \"bb3\")" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-WEIGHTING" (quote p-weighting) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil) (om-load-inputkeyword (quote input-keyword) "" "for" (quote :for) nil nil))) (om-make-point 86 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-CYCLE 2" (quote p-cycle) (quote ((om-load-inputfun (quote input-funbox) "data" "OF" nil))) (om-make-point 106 307) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote b)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 168 402) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-JOIN" (quote p-join) (quote ((om-load-inputfun (quote input-funbox) "" "OF" nil))) (om-make-point 161 454) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote b)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote c)))) (om-make-point 452 403) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 445 38) (quote "join - Three dimensional motives with random variation") "" (om-make-point 34 36) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 1 0 1 nil 0) (3 0 1 1 nil 0) (0 0 1 2 nil 0) (3 2 1 4 nil 0) (4 0 3 0 nil 0) (2 0 3 1 nil 0) (6 0 4 0 nil 0) (36 0 5 0 nil 0) (35 0 6 0 nil 0) (12 0 6 1 nil 0) (5 0 6 2 nil 0) (7 0 8 0 nil 0) (9 0 11 0 nil 0) (10 0 11 1 nil 0) (22 0 12 0 nil 0) (16 0 15 0 nil 0) (13 0 15 1 nil 0) (14 0 16 0 nil 0) (32 0 19 0 nil 0) (18 0 19 1 nil 0) (17 0 19 2 nil 0) (15 0 21 0 nil 0) (28 0 22 0 nil 0) (21 0 22 1 nil 0) (20 0 22 2 nil 0) (24 0 25 0 nil 0) (27 0 26 0 nil 0) (29 0 28 0 nil 0) (31 0 32 0 nil 0) (30 0 32 1 nil 0) (19 0 33 0 nil 0) (33 0 34 0 nil 0) (25 0 34 1 nil 0) (23 0 34 2 nil 0) (34 0 35 0 nil 0) (26 0 36 0 nil 0) (11 0 36 1 nil 0) (8 0 36 2 nil 0))) nil 7.04))
