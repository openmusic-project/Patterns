; OM File Header - Saved 2017/08/01 13:59:25
; (6.120001 :patc (om-make-point 10 160) (om-make-point 0 0) (om-make-point 835 658) "" 183 0 nil "2017/08/01 13:59:25")
; End File Header
(in-package :om)(load-lib-for (quote ("Patterns")))(setf *om-current-persistent* (om-load-patch1 "4 a - pval" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 233 105) (quote "Not very useful example.$The cool thing is that these$values can be set and looked$up later in the evaluation process.$See examp \"4 b\" for a more complete$example") nil (om-make-point 345 257) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 167 60) (quote "2: eval this to adjust$what the pattern at the left$will return") nil (om-make-point 224 369) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 139 45) (quote "1: eval here, and lock$the 'pval at the top") nil (om-make-point 121 472) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 303 157) (om-make-point 48 32) 5000 "5000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 249 157) (om-make-point 48 32) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 1000) (om-load-inputfun (quote input-funbox) "max" "HIGH" 5000))) (om-make-point 259 197) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 199 237) (om-make-point 39 32) (quote btw) "btw" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SET-PVAL" (quote set-pval) (quote ((om-load-inputfun (quote input-funbox) "" "NAME" nil) (om-load-inputfun (quote input-funbox) "" "VAL" nil))) (om-make-point 243 298) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 106 413) (om-make-point 23 32) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-NEXT" (quote p-next) (quote ((om-load-inputfun (quote input-funbox) "pattern" "OBJ" (quote t)) (om-load-inputfun (quote input-funbox) "pattern" "NUM" nil))) (om-make-point 74 459) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 76 165) (om-make-point 39 32) (quote btw) "btw" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 147 237) (om-make-point 27 32) (quote b) "b" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 40 236) (om-make-point 27 32) (quote a) "a" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote a)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote b)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote c)))) (om-make-point 76 299) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PVAL" (quote pval) (quote ((om-load-inputfun (quote input-funbox) "" "NAME" nil))) (om-make-point 74 205) nil (list nil) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-CYCLE" (quote p-cycle) (quote ((om-load-inputfun (quote input-funbox) "data" "OF" nil))) (om-make-point 67 350) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 736 75) (quote "A specialized pattern that evaluates its data whenever p-next selects it in a pattern. The name stands for \"pattern evaluation\".$The name passed to pval would typically be assigned a value using #'set-pval during the execution of the patch.$$See generic pattern initializations for documentation on keyword initializations to the pattern. ") nil (om-make-point 31 68) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 48 38) (quote "pval") "" (om-make-point 34 36) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 15.998697916666666D0 :family "Liberation Sans" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 5 0 nil 0) (3 0 5 1 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (15 0 9 0 nil 0) (8 0 9 1 nil 0) (12 0 13 0 nil 0) (14 0 13 1 nil 0) (11 0 13 2 nil 0) (10 0 14 0 nil 0) (13 0 15 0 nil 0))) nil 6.120001))
